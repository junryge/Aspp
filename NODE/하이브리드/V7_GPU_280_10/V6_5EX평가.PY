"""
ExtremeNet V6.5 - ÏÉà Îç∞Ïù¥ÌÑ∞ ÌèâÍ∞Ä (TF 2.16.1 Lambda Î†àÏù¥Ïñ¥ Ìï¥Í≤∞)
==================================================
data/20250732_to20250806.csv Îç∞Ïù¥ÌÑ∞ ÌèâÍ∞Ä
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import warnings
import os
import pickle
from datetime import datetime, timedelta

warnings.filterwarnings('ignore')

# TensorFlow 2.16.1 Lambda Î†àÏù¥Ïñ¥ Î°úÎìú ÌóàÏö©
os.environ['TF_USE_LEGACY_KERAS'] = '1'

print("="*80)
print("üîÆ ExtremeNet V6.5 - ÏÉà Îç∞Ïù¥ÌÑ∞ ÌèâÍ∞Ä")
print(f"üìä TensorFlow {tf.__version__}")
print("="*80)

# ========================================
# Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÌÅ¥ÎûòÏä§
# ========================================
class DataEvaluator:
    def __init__(self, model_path='models_final/extremenet_v65_final.keras',
                 scaler_path='scalers_final/'):
        """ÌèâÍ∞ÄÍ∏∞ Ï¥àÍ∏∞Ìôî"""
        
        # Î™®Îç∏ ÏÜçÏÑ± Ï¥àÍ∏∞Ìôî
        self.model = None
        self.scaler_X = None
        self.scaler_y = None
        
        # Î™®Îç∏ Î°úÎìú
        print("\nüì¶ Î™®Îç∏ Î°úÎî© Ï§ë...")
        
        # Î™®Îç∏ Í≤ΩÎ°úÎì§
        model_paths = [
            model_path,
            'models_final/best_extremenet.keras',
            'checkpoints_final/extremenet_final.keras',
        ]
        
        model_loaded = False
        for path in model_paths:
            if os.path.exists(path):
                try:
                    print(f"  ÏãúÎèÑ: {path}")
                    
                    # TensorFlow 2.16+ safe_mode=FalseÎ°ú Lambda Î†àÏù¥Ïñ¥ Î°úÎìú
                    self.model = tf.keras.models.load_model(
                        path,
                        safe_mode=False  # Lambda Î†àÏù¥Ïñ¥ Î°úÎìú ÌóàÏö©
                    )
                    
                    print(f"‚úÖ Î™®Îç∏ Î°úÎìú ÏÑ±Í≥µ: {path}")
                    model_loaded = True
                    break
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Î°úÎìú Ïã§Ìå®: {str(e)[:100]}")
                    continue
        
        if not model_loaded:
            print("\n‚ùå Î™®Îç∏ Î°úÎìú Ïã§Ìå®!")
            print("ÌôïÏù∏Ìïú Í≤ΩÎ°ú:")
            for path in model_paths:
                print(f"  - {path}: {'[Ï°¥Ïû¨]' if os.path.exists(path) else '[ÏóÜÏùå]'}")
            raise FileNotFoundError("Î™®Îç∏ÏùÑ Î°úÎìúÌï† Ïàò ÏóÜÏäµÎãàÎã§.")
        
        # Ïä§ÏºÄÏùºÎü¨ Î°úÎìú
        print("\nüì¶ Ïä§ÏºÄÏùºÎü¨ Î°úÎî© Ï§ë...")
        
        scaler_paths = [
            (f'{scaler_path}scaler_X.pkl', f'{scaler_path}scaler_y.pkl'),
            ('scalers/scaler_X.pkl', 'scalers/scaler_y.pkl'),
        ]
        
        scaler_loaded = False
        for x_path, y_path in scaler_paths:
            if os.path.exists(x_path) and os.path.exists(y_path):
                try:
                    with open(x_path, 'rb') as f:
                        self.scaler_X = pickle.load(f)
                    with open(y_path, 'rb') as f:
                        self.scaler_y = pickle.load(f)
                    print(f"‚úÖ Ïä§ÏºÄÏùºÎü¨ Î°úÎìú ÏÑ±Í≥µ")
                    scaler_loaded = True
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è Ïä§ÏºÄÏùºÎü¨ Î°úÎìú Ïã§Ìå®: {e}")
        
        if not scaler_loaded:
            print("‚ö†Ô∏è Ïä§ÏºÄÏùºÎü¨ ÏóÜÏùå, ÏÉàÎ°ú ÏÉùÏÑ±")
            self.scaler_X = StandardScaler()
            self.scaler_y = MinMaxScaler(feature_range=(0, 1))
            self.need_fit_scaler = True
        else:
            self.need_fit_scaler = False
        
        # ÌäπÏÑ± Ïª¨Îüº
        self.feature_columns = [
            'TOTALCNT', 'M14AM14B', 'M14AM14BSUM', 'M14AM10A', 'M14AM16',
            'RATIO', 'GOLDEN', 'SIGNAL_ZONE', 'PRE_SIGNAL', 'DANGER_ZONE',
            'PATTERN', 'TREND',
            'MA_5', 'MA_10', 'MA_20',
            'STD_5', 'STD_10', 'STD_20',
            'M14B_MA_5', 'M14B_MA_10', 'M14B_MA_20',
            'CHANGE_1', 'CHANGE_5', 'CHANGE_10',
            'M14B_CHANGE_1', 'M14B_CHANGE_5', 'M14B_CHANGE_10',
            'RISE_COUNT'
        ]
        
        self.seq_len = 100
        self.pred_len = 10
        
    def load_and_process_data(self, filepath):
        """Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î∞è Ï†ÑÏ≤òÎ¶¨"""
        print(f"\nüìÇ Îç∞Ïù¥ÌÑ∞ Î°úÎî©: {filepath}")
        
        df = pd.read_csv(filepath)
        print(f"‚úÖ ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞: {len(df):,}Ìñâ")
        
        # ÏãúÍ∞Ñ Ï†ïÎ†¨
        df['CURRTIME'] = pd.to_datetime(df['CURRTIME'].astype(str), 
                                       format='%Y%m%d%H%M', errors='coerce')
        df = df.sort_values('CURRTIME').reset_index(drop=True)
        
        # 0Í∞í Ï†úÍ±∞
        df = df[df['TOTALCNT'] > 0].reset_index(drop=True)
        print(f"‚úÖ Ïú†Ìö® Îç∞Ïù¥ÌÑ∞: {len(df):,}Ìñâ")
        
        # Íµ¨Í∞Ñ ÌÜµÍ≥Ñ
        normal = (df['TOTALCNT'] < 1400).sum()
        caution = ((df['TOTALCNT'] >= 1400) & (df['TOTALCNT'] <= 1650)).sum()
        signal = ((df['TOTALCNT'] >= 1651) & (df['TOTALCNT'] <= 1699)).sum()
        danger = (df['TOTALCNT'] >= 1700).sum()
        
        print(f"\nüìä Îç∞Ïù¥ÌÑ∞ Î∂ÑÌè¨:")
        print(f"  Ï†ïÏÉÅ(~1400): {normal:,}Í∞ú ({normal/len(df)*100:.1f}%)")
        print(f"  Ï£ºÏùò(1400~1650): {caution:,}Í∞ú ({caution/len(df)*100:.1f}%)")
        print(f"  Ïã†Ìò∏(1651~1699): {signal:,}Í∞ú ({signal/len(df)*100:.1f}%)")
        print(f"  ÏúÑÌóò(1700+): {danger:,}Í∞ú ({danger/len(df)*100:.1f}%)")
        
        return df
    
    def create_features(self, df):
        """ÌäπÏÑ± ÏÉùÏÑ±"""
        print("\n‚öôÔ∏è ÌäπÏÑ± ÏÉùÏÑ± Ï§ë...")
        
        # Í∏∞Î≥∏ ÌäπÏÑ±
        df['RATIO'] = df['M14AM14B'] / (df['M14AM10A'] + 1)
        df['GOLDEN'] = ((df['M14AM14B'] > 300) & (df['M14AM10A'] < 80)).astype(int)
        
        # Íµ¨Í∞Ñ ÌäπÏÑ±
        df['SIGNAL_ZONE'] = ((df['TOTALCNT'] >= 1651) & (df['TOTALCNT'] <= 1699)).astype(int)
        df['PRE_SIGNAL'] = ((df['TOTALCNT'] >= 1600) & (df['TOTALCNT'] < 1651)).astype(int)
        df['DANGER_ZONE'] = (df['TOTALCNT'] >= 1700).astype(int)
        
        # Ïù¥ÎèôÌèâÍ∑†
        for w in [5, 10, 20]:
            df[f'MA_{w}'] = df['TOTALCNT'].rolling(w, min_periods=1).mean()
            df[f'STD_{w}'] = df['TOTALCNT'].rolling(w, min_periods=1).std().fillna(0)
            df[f'M14B_MA_{w}'] = df['M14AM14B'].rolling(w, min_periods=1).mean()
        
        # Î≥ÄÌôîÏú®
        for lag in [1, 5, 10]:
            df[f'CHANGE_{lag}'] = df['TOTALCNT'].diff(lag).fillna(0)
            df[f'M14B_CHANGE_{lag}'] = df['M14AM14B'].diff(lag).fillna(0)
        
        # Ïó∞ÏÜç ÏÉÅÏäπ
        df['RISE'] = (df['TOTALCNT'] > df['TOTALCNT'].shift(1)).astype(int)
        df['RISE_COUNT'] = df['RISE'].rolling(10, min_periods=1).sum()
        
        # Ìå®ÌÑ¥
        df['PATTERN'] = 0
        signal_mask = ((df['TOTALCNT'] >= 1651) & (df['TOTALCNT'] <= 1699))
        high_m14b = df['M14AM14B'].rolling(100, min_periods=1).mean() > 380
        df.loc[signal_mask, 'PATTERN'] = 1
        df.loc[high_m14b, 'PATTERN'] = 2
        
        # Ï∂îÏÑ∏
        df['TREND'] = 1  
        for i in range(20, len(df)):
            recent = df['TOTALCNT'].iloc[i-20:i].values
            if len(recent) > 1:
                slope = np.polyfit(range(len(recent)), recent, 1)[0]
                if slope > 5:
                    df.loc[i, 'TREND'] = 2
                elif slope < -5:
                    df.loc[i, 'TREND'] = 0
        
        print(f"‚úÖ ÌäπÏÑ± ÏÉùÏÑ± ÏôÑÎ£å: {len(self.feature_columns)}Í∞ú")
        
        # Ïä§ÏºÄÏùºÎü¨ ÌïôÏäµ ÌïÑÏöîÏãú
        if hasattr(self, 'need_fit_scaler') and self.need_fit_scaler:
            print("‚öôÔ∏è Ïä§ÏºÄÏùºÎü¨ ÌïôÏäµ Ï§ë...")
            X_sample = df[self.feature_columns].values[:1000]
            y_sample = df['TOTALCNT'].values[:1000].reshape(-1, 1)
            self.scaler_X.fit(X_sample)
            self.scaler_y.fit(y_sample)
            print("‚úÖ Ïä§ÏºÄÏùºÎü¨ ÌïôÏäµ ÏôÑÎ£å")
        
        return df
    
    def predict_sequences(self, df):
        """ÏãúÌÄÄÏä§ Îã®ÏúÑÎ°ú ÏòàÏ∏°"""
        
        if self.model is None:
            raise ValueError("Î™®Îç∏Ïù¥ Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!")
        
        print("\nüîÆ ÏòàÏ∏° ÏãúÏûë...")
        
        results = []
        max_idx = len(df) - self.seq_len - self.pred_len + 1
        
        if max_idx <= 0:
            print(f"‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±. ÏµúÏÜå {self.seq_len + self.pred_len}Í∞ú ÌïÑÏöî")
            return pd.DataFrame()
        
        for i in range(max_idx):
            # 100Î∂Ñ Îç∞Ïù¥ÌÑ∞
            seq_data = df.iloc[i:i+self.seq_len]
            current_time = seq_data['CURRTIME'].iloc[-1]
            target_time = current_time + timedelta(minutes=10)
            
            # Ïã§Ï†úÍ∞í
            if i+self.seq_len+self.pred_len-1 < len(df):
                actual_value = df['TOTALCNT'].iloc[i+self.seq_len+self.pred_len-1]
            else:
                actual_value = np.nan
            
            # ÌäπÏÑ± Ï∂îÏ∂ú Î∞è Ïä§ÏºÄÏùºÎßÅ
            X = seq_data[self.feature_columns].values
            
            try:
                X_scaled = self.scaler_X.transform(X.reshape(-1, len(self.feature_columns)))
                X_scaled = X_scaled.reshape(1, self.seq_len, len(self.feature_columns))
            except:
                X_scaled = X.reshape(1, self.seq_len, len(self.feature_columns))
            
            # ÏòàÏ∏°
            try:
                preds = self.model.predict(X_scaled, verbose=0)
                
                if isinstance(preds, list):
                    y_pred_scaled = preds[0][0, 0]
                else:
                    y_pred_scaled = preds[0, 0]
                
                try:
                    y_pred = self.scaler_y.inverse_transform([[y_pred_scaled]])[0, 0]
                except:
                    y_pred = y_pred_scaled * 900 + 900
                
            except Exception as e:
                print(f"‚ö†Ô∏è ÏòàÏ∏° Ïò§Î•ò (Ïù∏Îç±Ïä§ {i}): {e}")
                continue
            
            current_value = seq_data['TOTALCNT'].iloc[-1]
            
            # ÏùºÎ≥Ñ ÏµúÎåÄÍ∞í
            current_date = current_time.date()
            day_data = df[df['CURRTIME'].dt.date == current_date]
            daily_max = day_data['TOTALCNT'].max() if len(day_data) > 0 else current_value
            
            results.append({
                'DateTime': current_time.strftime('%Y-%m-%d %H:%M'),
                'TargetDateTime': target_time.strftime('%Y-%m-%d %H:%M'),
                'CurrentValue': current_value,
                'ActualValue': actual_value,
                'PredictedValue': y_pred,
                'DailyMax': daily_max,
                'Error': abs(actual_value - y_pred) if not np.isnan(actual_value) else np.nan
            })
            
            if (i+1) % 100 == 0:
                print(f"  ÏßÑÌñâ: {i+1}/{max_idx}")
        
        print(f"‚úÖ ÏòàÏ∏° ÏôÑÎ£å: {len(results)}Í∞ú")
        return pd.DataFrame(results)
    
    def evaluate_results(self, results_df):
        """ÌèâÍ∞Ä Î©îÌä∏Î¶≠ Í≥ÑÏÇ∞"""
        print("\nüìä ÌèâÍ∞Ä Î©îÌä∏Î¶≠:")
        
        if results_df.empty:
            print("‚ö†Ô∏è ÏòàÏ∏° Í≤∞Í≥º ÏóÜÏùå")
            return
        
        valid_results = results_df.dropna(subset=['ActualValue', 'PredictedValue'])
        
        if len(valid_results) > 0:
            mae = mean_absolute_error(valid_results['ActualValue'], 
                                     valid_results['PredictedValue'])
            rmse = np.sqrt(mean_squared_error(valid_results['ActualValue'], 
                                             valid_results['PredictedValue']))
            r2 = r2_score(valid_results['ActualValue'], 
                         valid_results['PredictedValue'])
            
            print(f"  MAE: {mae:.2f}")
            print(f"  RMSE: {rmse:.2f}")
            print(f"  R¬≤: {r2:.4f}")
            
            # Íµ¨Í∞ÑÎ≥Ñ ÌèâÍ∞Ä
            signal_mask = (valid_results['ActualValue'] >= 1651) & \
                         (valid_results['ActualValue'] <= 1699)
            danger_mask = valid_results['ActualValue'] >= 1700
            
            if signal_mask.sum() > 0:
                signal_mae = mean_absolute_error(
                    valid_results[signal_mask]['ActualValue'],
                    valid_results[signal_mask]['PredictedValue']
                )
                print(f"\nüü† Ïã†Ìò∏Íµ¨Í∞Ñ(1651~1699) MAE: {signal_mae:.2f}")
                print(f"  ÏÉòÌîå Ïàò: {signal_mask.sum()}Í∞ú")
            
            if danger_mask.sum() > 0:
                danger_mae = mean_absolute_error(
                    valid_results[danger_mask]['ActualValue'],
                    valid_results[danger_mask]['PredictedValue']
                )
                print(f"üî¥ ÏúÑÌóòÍµ¨Í∞Ñ(1700+) MAE: {danger_mae:.2f}")
                print(f"  ÏÉòÌîå Ïàò: {danger_mask.sum()}Í∞ú")

# ========================================
# Î©îÏù∏ Ïã§Ìñâ
# ========================================
def main():
    try:
        # ÌèâÍ∞ÄÍ∏∞ ÏÉùÏÑ±
        evaluator = DataEvaluator()
        
        # Îç∞Ïù¥ÌÑ∞ Í≤ΩÎ°ú Ï∞æÍ∏∞
        data_paths = [
            'data/20250732_to20250806.csv',
            '20250732_to20250806.csv', 
            'data/20250807_DATA.CSV',
            '20250807_DATA.CSV',
            'data/20240201_TO_202507281705.csv',
            '20240201_TO_202507281705.csv'
        ]
        
        data_path = None
        for path in data_paths:
            if os.path.exists(path):
                data_path = path
                print(f"üìå Îç∞Ïù¥ÌÑ∞: {data_path}")
                break
        
        if not data_path:
            print("‚ùå Îç∞Ïù¥ÌÑ∞ ÌååÏùº ÏóÜÏùå!")
            return None
        
        # Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
        df = evaluator.load_and_process_data(data_path)
        df = evaluator.create_features(df)
        
        # ÏòàÏ∏°
        results_df = evaluator.predict_sequences(df)
        
        if results_df.empty:
            print("‚ö†Ô∏è ÏòàÏ∏° Í≤∞Í≥º ÏóÜÏùå")
            return results_df
        
        # ÌèâÍ∞Ä
        evaluator.evaluate_results(results_df)
        
        # Ï†ÄÏû•
        output_file = 'prediction_results.csv'
        save_columns = ['DateTime', 'TargetDateTime', 'DailyMax', 'ActualValue', 
                       'PredictedValue', 'Error'] if 'ActualValue' in results_df.columns \
                      else ['DateTime', 'TargetDateTime', 'DailyMax', 'PredictedValue']
        
        results_df[save_columns].to_csv(output_file, index=False, encoding='utf-8-sig')
        print(f"\nüíæ Ï†ÄÏû•: {output_file}")
        
        # ÏÉòÌîå Ï∂úÎ†•
        print("\nüìã Í≤∞Í≥º ÏÉòÌîå:")
        print(results_df[save_columns].head(10))
        
        # ÌÜµÍ≥Ñ
        print(f"\nüìä ÏòàÏ∏°Í∞í ÏöîÏïΩ:")
        print(f"  ÌèâÍ∑†: {results_df['PredictedValue'].mean():.2f}")
        print(f"  ÌëúÏ§ÄÌé∏Ï∞®: {results_df['PredictedValue'].std():.2f}")
        print(f"  ÏµúÏÜå: {results_df['PredictedValue'].min():.2f}")
        print(f"  ÏµúÎåÄ: {results_df['PredictedValue'].max():.2f}")
        
        print("\n‚úÖ ÏôÑÎ£å!")
        return results_df
        
    except Exception as e:
        print(f"\n‚ùå Ïò§Î•ò: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    results = main()