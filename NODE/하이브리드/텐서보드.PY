"""
TensorBoard Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÏÑ§Ï†ï
================================
"""

# ===================================
# 1. TensorBoard ÏÑ§Ïπò
# ===================================
# pip install tensorboard

# ===================================
# 2. ÌïôÏäµ ÏΩîÎìúÏóê Ï∂îÍ∞Ä (train_model_improved Ìï®Ïàò ÏàòÏ†ï)
# ===================================

from tensorflow.keras.callbacks import TensorBoard
import datetime

def train_model_improved_with_tensorboard(model, model_name, X_train, y_train, X_val, y_val, 
                         epochs, batch_size, checkpoint_manager):
    """TensorBoard Ï∂îÍ∞ÄÎêú ÌïôÏäµ Ìï®Ïàò"""
    
    # TensorBoard Î°úÍ∑∏ ÎîîÎ†âÌÜ†Î¶¨
    log_dir = f"logs/fit/{model_name}_{datetime.datetime.now().strftime('%Y%m%d-%H%M%S')}"
    
    # ÏΩúÎ∞± ÏÑ§Ï†ï
    callbacks = [
        # TensorBoard Ï∂îÍ∞Ä!
        TensorBoard(
            log_dir=log_dir,
            histogram_freq=1,  # Îß§ ÏóêÌè≠ÎßàÎã§ ÌûàÏä§ÌÜ†Í∑∏Îû®
            write_graph=True,   # Î™®Îç∏ Íµ¨Ï°∞ ÏãúÍ∞ÅÌôî
            write_images=True,  # Í∞ÄÏ§ëÏπò Ïù¥ÎØ∏ÏßÄ
            update_freq='epoch',
            profile_batch=0     # ÌîÑÎ°úÌååÏùºÎßÅ ÎπÑÌôúÏÑ±Ìôî (Îπ†Î•¥Í≤å)
        ),
        
        EarlyStopping(monitor='val_loss', patience=30, restore_best_weights=True),
        ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=10, min_lr=1e-6),
        ModelCheckpoint(f'{checkpoint_manager.checkpoint_dir}/{model_name}_best.h5', 
                       save_best_only=True, monitor='val_loss')
    ]
    
    # ÌïôÏäµ
    history = model.fit(
        X_train, y_train,
        validation_data=(X_val, y_val),
        epochs=epochs,
        batch_size=batch_size,
        callbacks=callbacks,
        verbose=1
    )
    
    return history

# ===================================
# 3. Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ (Î≥ÑÎèÑ Ïä§ÌÅ¨Î¶ΩÌä∏)
# ===================================

import json
import time
import os

def monitor_training_progress():
    """
    Ï≤¥ÌÅ¨Ìè¨Ïù∏Ìä∏ ÌååÏùºÏùÑ ÏùΩÏñ¥ÏÑú ÏßÑÌñâÏÉÅÌô© Î™®ÎãàÌÑ∞ÎßÅ
    TensorBoard ÏóÜÏù¥ÎèÑ Í∞ÄÎä•!
    """
    
    checkpoint_file = 'checkpoints_v3/training_state.json'
    
    print("=" * 60)
    print("üìä ÌïôÏäµ ÏßÑÌñâ ÏÉÅÌô© Î™®ÎãàÌÑ∞ÎßÅ")
    print("=" * 60)
    
    while True:
        try:
            if os.path.exists(checkpoint_file):
                with open(checkpoint_file, 'r') as f:
                    state = json.load(f)
                
                current_model = state.get('current_model', 'Unknown')
                current_epoch = state.get('current_epoch', 0)
                
                # Î™®Îç∏Î≥Ñ Ïù¥Î†• ÌôïÏù∏
                if 'model_histories' in state:
                    for model_name, history in state['model_histories'].items():
                        if 'val_loss' in history and len(history['val_loss']) > 0:
                            latest_val_loss = history['val_loss'][-1]
                            latest_val_mae = history.get('val_mae', [0])[-1]
                            
                            print(f"\nÎ™®Îç∏: {model_name}")
                            print(f"  Epoch: {len(history['val_loss'])}")
                            print(f"  Val Loss: {latest_val_loss:.4f}")
                            print(f"  Val MAE: {latest_val_mae:.4f}")
                            print(f"  Ïã§Ï†ú MAE: {latest_val_mae * 200:.1f}")
                            
                            # ÏÑ±Îä• ÌåêÎã®
                            if latest_val_mae * 200 < 60:
                                print("  ‚úÖ Î™©Ìëú Îã¨ÏÑ±!")
                            elif latest_val_mae * 200 < 80:
                                print("  üî∂ ÏñëÌò∏")
                            else:
                                print("  ‚è≥ Í∞úÏÑ† Ï§ë...")
                
                print("\n" + "-" * 40)
                print(f"ÌòÑÏû¨ ÏãúÍ∞Å: {datetime.datetime.now().strftime('%H:%M:%S')}")
                print("10Ï¥à ÌõÑ ÏóÖÎç∞Ïù¥Ìä∏...")
                
            else:
                print("Ï≤¥ÌÅ¨Ìè¨Ïù∏Ìä∏ ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§. Í∏∞Îã§Î¶¨Îäî Ï§ë...")
            
            time.sleep(10)  # 10Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
            
        except KeyboardInterrupt:
            print("\nÎ™®ÎãàÌÑ∞ÎßÅ Ï¢ÖÎ£å")
            break
        except Exception as e:
            print(f"Ïò§Î•ò: {e}")
            time.sleep(5)

# ===================================
# 4. Í∞ÑÎã®Ìïú ÏßÑÌñâ ÏÉÅÌô© ÌôïÏù∏ (Îçî Í∞ÑÎã®!)
# ===================================

def quick_check():
    """
    ÌòÑÏû¨ ÏÉÅÌÉúÎßå Îπ†Î•¥Í≤å ÌôïÏù∏
    """
    import glob
    import matplotlib.pyplot as plt
    
    # Í∞ÄÏû• ÏµúÍ∑º Ï≤¥ÌÅ¨Ìè¨Ïù∏Ìä∏ Ï∞æÍ∏∞
    checkpoints = glob.glob('checkpoints_v3/*.h5')
    
    if checkpoints:
        latest = max(checkpoints, key=os.path.getctime)
        print(f"ÏµúÏã† Ï≤¥ÌÅ¨Ìè¨Ïù∏Ìä∏: {latest}")
        print(f"ÏàòÏ†ï ÏãúÍ∞Ñ: {datetime.datetime.fromtimestamp(os.path.getmtime(latest))}")
    
    # training.log ÌååÏùº ÌôïÏù∏
    if os.path.exists('training_improved.log'):
        with open('training_improved.log', 'r') as f:
            lines = f.readlines()
            
        # ÏµúÍ∑º 10Ï§Ñ Ï∂úÎ†•
        print("\nÏµúÍ∑º Î°úÍ∑∏:")
        for line in lines[-10:]:
            if 'Epoch' in line or 'loss' in line or 'MAE' in line:
                print(line.strip())
    
    # Í∞ÑÎã®Ìïú Í∑∏ÎûòÌîÑ
    try:
        with open('checkpoints_v3/training_state.json', 'r') as f:
            state = json.load(f)
        
        if 'model_histories' in state:
            for model_name, history in state['model_histories'].items():
                if 'val_loss' in history:
                    plt.figure(figsize=(10, 4))
                    
                    plt.subplot(1, 2, 1)
                    plt.plot(history.get('loss', []), label='Train Loss')
                    plt.plot(history.get('val_loss', []), label='Val Loss')
                    plt.title(f'{model_name} - Loss')
                    plt.xlabel('Epoch')
                    plt.ylabel('Loss')
                    plt.legend()
                    plt.grid(True)
                    
                    plt.subplot(1, 2, 2)
                    val_mae = history.get('val_mae', [])
                    real_mae = [m * 200 for m in val_mae]
                    plt.plot(real_mae)
                    plt.axhline(y=60, color='r', linestyle='--', label='Î™©Ìëú (60)')
                    plt.title(f'{model_name} - Ïã§Ï†ú MAE')
                    plt.xlabel('Epoch')
                    plt.ylabel('MAE')
                    plt.legend()
                    plt.grid(True)
                    
                    plt.tight_layout()
                    plt.savefig(f'progress_{model_name}.png')
                    plt.show()
                    
                    print(f"\nÍ∑∏ÎûòÌîÑ Ï†ÄÏû•: progress_{model_name}.png")
    except:
        pass

# ===================================
# 5. Ïã§Ìñâ Î∞©Î≤ï
# ===================================

if __name__ == "__main__":
    print("""
    ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:
    1. TensorBoard Ïã§Ìñâ (ÏÑ§Ïπò ÌïÑÏöî)
    2. Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ (TensorBoard ÏóÜÏù¥)
    3. Îπ†Î•∏ ÏÉÅÌÉú ÌôïÏù∏
    """)
    
    choice = input("ÏÑ†ÌÉù (1/2/3): ")
    
    if choice == "1":
        os.system("tensorboard --logdir=logs/fit")
        print("Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú http://localhost:6006 Ï†ëÏÜç!")
        
    elif choice == "2":
        monitor_training_progress()
        
    elif choice == "3":
        quick_check()