import tkinter as tk
from tkinter import filedialog, messagebox, colorchooser, scrolledtext, ttk
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import webbrowser
import os

# --------------------------------------------------------------------------
# 인코딩 자동 감지 함수 추가
# --------------------------------------------------------------------------
def read_csv_safe(filepath):
    """여러 인코딩을 시도하여 CSV 파일을 안전하게 읽습니다."""
    encodings = ['utf-8', 'cp949', 'euc-kr', 'ms949', 'latin-1']
    
    for encoding in encodings:
        try:
            return pd.read_csv(filepath, encoding=encoding)
        except UnicodeDecodeError:
            continue
    
    return pd.read_csv(filepath, encoding='utf-8', errors='ignore')

# --------------------------------------------------------------------------
# 성능 정보 창 클래스
# --------------------------------------------------------------------------
class PerformanceWindow:
    def __init__(self, parent):
        self.window = tk.Toplevel(parent)
        self.window.title("평가 결과 분석 입력")
        self.window.geometry("600x700")
        
        self.values = None
        
        main_frame = tk.Frame(self.window)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        top_frame = tk.LabelFrame(main_frame, text="📊 전체 성능 지표 입력", padx=10, pady=10)
        top_frame.pack(fill='x', pady=(0, 10))
        
        input_frame = tk.Frame(top_frame)
        input_frame.pack(pady=10)
        
        tk.Label(input_frame, text="MAE:", font=('Arial', 10)).grid(row=0, column=0, sticky='e', padx=5, pady=5)
        self.mae_var = tk.StringVar(value="30.23")
        tk.Entry(input_frame, textvariable=self.mae_var, width=15).grid(row=0, column=1, padx=5, pady=5)
        
        tk.Label(input_frame, text="RMSE:", font=('Arial', 10)).grid(row=1, column=0, sticky='e', padx=5, pady=5)
        self.rmse_var = tk.StringVar(value="36.02")
        tk.Entry(input_frame, textvariable=self.rmse_var, width=15).grid(row=1, column=1, padx=5, pady=5)
        
        tk.Label(input_frame, text="R²:", font=('Arial', 10)).grid(row=2, column=0, sticky='e', padx=5, pady=5)
        self.r2_var = tk.StringVar(value="0.72")
        tk.Entry(input_frame, textvariable=self.r2_var, width=15).grid(row=2, column=1, padx=5, pady=5)
        
        bottom_frame = tk.LabelFrame(main_frame, text="📝 기타 정보 (붙여넣기 가능)", padx=10, pady=10)
        bottom_frame.pack(fill='both', expand=True)
        
        self.text_widget = scrolledtext.ScrolledText(bottom_frame, height=20, width=70, wrap=tk.WORD)
        self.text_widget.pack(fill='both', expand=True)
        
        self.text_widget.insert('1.0', """📊 평가 결과 분석""")
        
        tk.Button(main_frame, text="확인", 
                 command=self.save_and_close,
                 bg='#3498DB', fg='white',
                 font=('Arial', 10, 'bold')).pack(pady=10)
        
    def save_and_close(self):
        self.values = {
            'mae': self.mae_var.get(),
            'rmse': self.rmse_var.get(),
            'r2': self.r2_var.get(),
            'other_info': self.text_widget.get('1.0', 'end-1c')
        }
        self.window.destroy()

# --------------------------------------------------------------------------
# 그래프 생성 로직
# --------------------------------------------------------------------------
def create_graph(params, perf_values=None):
    try:
        df = read_csv_safe(params['file_path'])
        
        actual_x_col = params['actual_x']
        actual_y_col = params['actual_y']
        hubroom_x_col = params['hubroom_x']
        hubroom_y_col = params['hubroom_y']
        predicted1_x_col = params['predicted1_x']
        predicted1_y_col = params['predicted1_y']
        predicted2_x_col = params['predicted2_x']
        predicted2_y_col = params['predicted2_y']
        predicted3_x_col = params['predicted3_x']
        predicted3_y_col = params['predicted3_y']
        
        # Y값을 숫자로 변환
        df[actual_y_col] = pd.to_numeric(df[actual_y_col], errors='coerce')
        df[hubroom_y_col] = pd.to_numeric(df[hubroom_y_col], errors='coerce')
        df[predicted1_y_col] = pd.to_numeric(df[predicted1_y_col], errors='coerce')
        df[predicted2_y_col] = pd.to_numeric(df[predicted2_y_col], errors='coerce')
        df[predicted3_y_col] = pd.to_numeric(df[predicted3_y_col], errors='coerce')
        
        # 트렌드 데이터 처리
        trend_data = params.get('trend_data', [])
        for trend_info in trend_data:
            x_col = trend_info['x_col']
            y_col = trend_info['y_col']
            if x_col in df.columns and y_col in df.columns:
                df[y_col] = pd.to_numeric(df[y_col], errors='coerce')
                try:
                    df[x_col] = pd.to_datetime(df[x_col])
                except:
                    pass
        
        # 필수 컬럼만 NaN 체크
        required_cols = [actual_y_col, hubroom_y_col, predicted1_y_col, predicted2_y_col, predicted3_y_col]
        df = df.dropna(subset=required_cols)
        
        # 점프예측 컬럼 확인
        jump_col = None
        for col in df.columns:
            if '점프예측' in col or 'jump' in col.lower():
                jump_col = col
                break
        
        # 패턴예측 컬럼 확인
        pattern_col = None
        for col in df.columns:
            if '패턴예측' in col or 'pattern' in col.lower():
                pattern_col = col
                break
        
        # 날짜 변환 및 포맷팅
        try:
            df[actual_x_col] = pd.to_datetime(df[actual_x_col])
            df['actual_time_str'] = df[actual_x_col].dt.strftime('%Y-%m-%d %H:%M:%S')
        except:
            df['actual_time_str'] = df[actual_x_col].astype(str)
            
        try:
            df[hubroom_x_col] = pd.to_datetime(df[hubroom_x_col])
            df['hubroom_time_str'] = df[hubroom_x_col].dt.strftime('%Y-%m-%d %H:%M:%S')
        except:
            df['hubroom_time_str'] = df[hubroom_x_col].astype(str)
            
        try:
            df[predicted1_x_col] = pd.to_datetime(df[predicted1_x_col])
            df['predicted1_time_str'] = df[predicted1_x_col].dt.strftime('%Y-%m-%d %H:%M:%S')
        except:
            df['predicted1_time_str'] = df[predicted1_x_col].astype(str)
            
        try:
            df[predicted2_x_col] = pd.to_datetime(df[predicted2_x_col])
            df['predicted2_time_str'] = df[predicted2_x_col].dt.strftime('%Y-%m-%d %H:%M:%S')
        except:
            df['predicted2_time_str'] = df[predicted2_x_col].astype(str)
            
        try:
            df[predicted3_x_col] = pd.to_datetime(df[predicted3_x_col])
            df['predicted3_time_str'] = df[predicted3_x_col].dt.strftime('%Y-%m-%d %H:%M:%S')
        except:
            df['predicted3_time_str'] = df[predicted3_x_col].astype(str)
        
        # 실제값의 시간을 공통 시간축으로 사용
        df['common_time'] = df[actual_x_col]
        
        # 점프예측 값 준비 및 색상 결정
        if jump_col:
            df['jump_value'] = df[jump_col].astype(str)
            df['jump_color'] = df[jump_col].apply(
                lambda x: '#27AE60' if str(x).upper() == 'O' else '#E74C3C' if str(x).upper() == 'X' else '#666'
            )
        else:
            df['jump_value'] = 'N/A'
            df['jump_color'] = '#666'
        
        # 패턴예측 값 준비 및 색상 결정
        if pattern_col:
            df['pattern_value'] = df[pattern_col].astype(str)
            def get_pattern_color(val):
                val_str = str(val).strip()
                if '상승' in val_str or '증가' in val_str:
                    return '#27AE60'
                elif '하락' in val_str or '감소' in val_str:
                    return '#E74C3C'
                elif '안정' in val_str or '유지' in val_str:
                    return '#3498DB'
                else:
                    return '#8E44AD'
            df['pattern_color'] = df[pattern_col].apply(get_pattern_color)
        else:
            df['pattern_value'] = 'N/A'
            df['pattern_color'] = '#95A5A6'
        
        # 트렌드 데이터 준비 - 각 트렌드의 시간과 값을 df에 추가
        trend_info_list = []  # INFO에 표시할 트렌드 정보 저장
        customdata_columns = [actual_y_col, 'actual_time_str', 
                              hubroom_y_col, 'hubroom_time_str',
                              predicted1_y_col, 'predicted1_time_str',
                              predicted2_y_col, 'predicted2_time_str',
                              predicted3_y_col, 'predicted3_time_str',
                              'jump_value', 'jump_color', 'pattern_value', 'pattern_color']
        
        current_idx = 14  # customdata에서 다음 인덱스 (0-13까지 이미 사용중)
        
        # 각 트렌드 데이터 처리
        for trend_info in trend_data:
            x_col = trend_info.get('x_col', '')
            y_col = trend_info.get('y_col', '')
            name = trend_info.get('name', '')
            
            if not x_col or not y_col or not name:
                continue
            
            if x_col in df.columns and y_col in df.columns:
                # Y값이 숫자인지 확인
                try:
                    df[y_col] = pd.to_numeric(df[y_col], errors='coerce')
                except:
                    continue
                
                # 시간 문자열 생성
                time_col_name = f'trend_{name}_time'
                try:
                    df[time_col_name] = pd.to_datetime(df[x_col]).dt.strftime('%Y-%m-%d %H:%M:%S')
                except:
                    df[time_col_name] = df[x_col].astype(str)
                
                # customdata 컬럼에 추가
                customdata_columns.append(y_col)
                customdata_columns.append(time_col_name)
                
                # INFO 표시 정보 저장
                trend_info_list.append({
                    'name': name,
                    'value_idx': current_idx,
                    'time_idx': current_idx + 1,
                    'group': 'MAXCAP' if 'MAXCAP' in name else 'UTIL' if 'UTIL' in name else 'JOB' if 'JOB' in name else '기타'
                })
                
                current_idx += 2
        
        # hovertemplate 생성
        hover_template = '<b style="color: #2E86C1; font-size: 16px;">📊 INFO 정보</b><br>'
        hover_template += '<span style="color: #85C1E2;">═══════════════════</span><br>'
        hover_template += '<b style="color: #1f77b4;">🔵 실제값</b><br>'
        hover_template += '<span style="color: #666;">날짜:</span> <span style="color: #000;">%{customdata[1]}</span><br>'
        hover_template += '<span style="color: #666;">실제값:</span> <b style="color: #1f77b4;">%{customdata[0]:.2f}</b><br>'
        hover_template += '<span style="color: #85C1E2;">═══════════════════</span><br>'
        hover_template += '<b style="color: #9467bd;">🟣 HUBROOM</b><br>'
        hover_template += '<span style="color: #666;">날짜:</span> <span style="color: #000;">%{customdata[3]}</span><br>'
        hover_template += '<span style="color: #666;">값:</span> <b style="color: #9467bd;">%{customdata[2]:.2f}</b><br>'
        hover_template += '<span style="color: #85C1E2;">═══════════════════</span><br>'
        hover_template += '<b style="color: #ff7f0e;">🔶 예측값1</b><br>'
        hover_template += '<span style="color: #666;">날짜:</span> <span style="color: #000;">%{customdata[5]}</span><br>'
        hover_template += '<span style="color: #666;">예측값:</span> <b style="color: #ff7f0e;">%{customdata[4]:.2f}</b><br>'
        hover_template += '<span style="color: #85C1E2;">═══════════════════</span><br>'
        hover_template += '<b style="color: #2ca02c;">🔷 예측값2</b><br>'
        hover_template += '<span style="color: #666;">날짜:</span> <span style="color: #000;">%{customdata[7]}</span><br>'
        hover_template += '<span style="color: #666;">예측값:</span> <b style="color: #2ca02c;">%{customdata[6]:.2f}</b><br>'
        hover_template += '<span style="color: #85C1E2;">═══════════════════</span><br>'
        hover_template += '<b style="color: #d62728;">🔸 예측값3</b><br>'
        hover_template += '<span style="color: #666;">날짜:</span> <span style="color: #000;">%{customdata[9]}</span><br>'
        hover_template += '<span style="color: #666;">예측값:</span> <b style="color: #d62728;">%{customdata[8]:.2f}</b><br>'
        hover_template += '<span style="color: #85C1E2;">═══════════════════</span><br>'
        hover_template += '<span style="color: #666;">점프예측:</span> '
        hover_template += '<b style="color: %{customdata[11]};">%{customdata[10]}</b><br>'
        hover_template += '<span style="color: #666;">패턴예측:</span> '
        hover_template += '<b style="color: %{customdata[13]};">%{customdata[12]}</b>'
        
        # 트렌드 데이터 그룹별로 추가
        group_colors = {
            'MAXCAP': ('#3498DB', '📦'),
            'UTIL': ('#E67E22', '📊'),
            'JOB': ('#9B59B6', '🔄'),
            '기타': ('#95A5A6', '📌')
        }
        
        # 그룹별로 정렬
        grouped_trends = {'MAXCAP': [], 'UTIL': [], 'JOB': [], '기타': []}
        for trend in trend_info_list:
            grouped_trends[trend['group']].append(trend)
        
        # 각 그룹 출력
        for group_name in ['MAXCAP', 'UTIL', 'JOB', '기타']:
            trends = grouped_trends[group_name]
            if trends:
                color, emoji = group_colors[group_name]
                hover_template += '<br><span style="color: #85C1E2;">═══════════════════</span><br>'
                hover_template += f'<b style="color: {color}; font-size: 14px;">{emoji} {group_name} 그룹 ({len(trends)}개)</b><br>'
                
                for trend in trends:
                    name = trend['name']
                    val_idx = trend['value_idx']
                    time_idx = trend['time_idx']
                    hover_template += f'<span style="color: #666;">{name}:</span><br>'
                    hover_template += f'  <span style="color: #666;">날짜:</span> %{{customdata[{time_idx}]}}<br>'
                    hover_template += f'  <span style="color: #666;">값:</span> <b style="color: {color};">%{{customdata[{val_idx}]:.2f}}</b><br>'
        
        hover_template += '<extra></extra>'

        fig = go.Figure()

        # 실제값 라인 - 전체 정보 포함
        fig.add_trace(go.Scattergl(
            x=df['common_time'],
            y=df[actual_y_col], 
            mode='lines+markers',
            name='실제값 (Actual)',
            line=dict(color=params['actual_color'], 
                     dash=None if params['actual_style'] == 'Solid' else params['actual_style'].lower(), 
                     width=3),
            marker=dict(size=6),
            customdata=df[customdata_columns].values,
            hovertemplate=hover_template
        ))
        
        # HUBROOM 라인 - 동일한 INFO 정보 표시
        fig.add_trace(go.Scattergl(
            x=df['common_time'],
            y=df[hubroom_y_col], 
            mode='lines+markers',
            name='HUBROOM',
            line=dict(color=params['hubroom_color'], 
                     dash=None if params['hubroom_style'] == 'Solid' else params['hubroom_style'].lower(), 
                     width=3),
            marker=dict(size=6),
            customdata=df[customdata_columns].values,
            hovertemplate=hover_template
        ))
        
        # 예측값1 라인 - 동일한 INFO 정보 표시
        fig.add_trace(go.Scattergl(
            x=df['common_time'],
            y=df[predicted1_y_col], 
            mode='lines+markers',
            name='예측값1 (Predicted1)',
            line=dict(color=params['predicted1_color'], 
                     dash=None if params['predicted1_style'] == 'Solid' else params['predicted1_style'].lower(), 
                     width=3),
            marker=dict(size=6),
            customdata=df[customdata_columns].values,
            hovertemplate=hover_template
        ))
        
        # 예측값2 라인 - 동일한 INFO 정보 표시
        fig.add_trace(go.Scattergl(
            x=df['common_time'],
            y=df[predicted2_y_col], 
            mode='lines+markers',
            name='예측값2 (Predicted2)',
            line=dict(color=params['predicted2_color'], 
                     dash=None if params['predicted2_style'] == 'Solid' else params['predicted2_style'].lower(), 
                     width=3),
            marker=dict(size=6),
            customdata=df[customdata_columns].values,
            hovertemplate=hover_template
        ))
        
        # 예측값3 라인 - 동일한 INFO 정보 표시
        fig.add_trace(go.Scattergl(
            x=df['common_time'],
            y=df[predicted3_y_col], 
            mode='lines+markers',
            name='예측값3 (Predicted3)',
            line=dict(color=params['predicted3_color'], 
                     dash=None if params['predicted3_style'] == 'Solid' else params['predicted3_style'].lower(), 
                     width=3),
            marker=dict(size=6),
            customdata=df[customdata_columns].values,
            hovertemplate=hover_template
        ))
        
        # 트렌드 데이터 라인들 - 모두 동일한 INFO 정보 표시
        trend_colors = ['#808080', '#A9A9A9', '#696969', '#778899', '#708090', 
                       '#2F4F4F', '#556B2F', '#8B4513', '#A0522D', '#B8860B',
                       '#BDB76B', '#8B008B', '#9932CC', '#8B0000', '#DC143C',
                       '#FF6347', '#FF4500']
        
        for idx, trend_info in enumerate(trend_data):
            x_col = trend_info.get('x_col', '')
            y_col = trend_info.get('y_col', '')
            name = trend_info.get('name', '')
            
            # 빈 문자열이거나 컬럼이 없으면 스킵
            if not x_col or not y_col or not name:
                continue
            
            if x_col in df.columns and y_col in df.columns:
                color = trend_colors[idx % len(trend_colors)]
                fig.add_trace(go.Scattergl(
                    x=df[x_col],
                    y=df[y_col],
                    mode='lines',
                    name=f'Trend: {name}',
                    line=dict(color=color, dash='dot', width=1.5),
                    opacity=0.7,
                    customdata=df[customdata_columns].values,
                    hovertemplate=hover_template
                ))
        
        # 리미트선
        try:
            limit_value = float(params.get('limit_value', 300))
            all_x = df['common_time'].sort_values()
            limit_x = pd.date_range(start=all_x.iloc[0], end=all_x.iloc[-1], periods=100)
            limit_y = [limit_value] * 100
            
            fig.add_trace(go.Scatter(
                x=limit_x,
                y=limit_y,
                mode='lines',
                name=f'리미트선 ({limit_value})',
                line=dict(color='red', width=2.5),
                hovertemplate=f'<b style="color: red;">⚠️ 리미트선: {limit_value:.2f}</b><extra></extra>'
            ))
        except Exception as e:
            print(f"리미트선 생성 중 오류: {e}")
            pass
        
        # 레이아웃
        fig.update_layout(
            title=params['title'], 
            xaxis_title='시간', 
            yaxis_title='값', 
            hovermode='closest',
            plot_bgcolor='white',
            xaxis=dict(showgrid=True, gridcolor='lightgray'),
            yaxis=dict(showgrid=True, gridcolor='lightgray'),
            showlegend=True,
            legend=dict(
                yanchor="top",
                y=0.99,
                xanchor="left",
                x=0.01
            ),
            hoverlabel=dict(
                bgcolor="white",
                font_size=12,
                font_family="Arial",
                bordercolor="#2E86C1"
            )
        )

        output_filename = "final_guided_graph.html"
        html_content = fig.to_html(include_plotlyjs='cdn')

        # HTML 하단에는 아무것도 표시하지 않음 - 그래프 호버에만 INFO 정보 표시

        style_section = """
        <style>
            body {
                background-color: #f8f9fa;
                margin: 0;
                padding: 20px 0;
            }
            .plotly-graph-div {
                margin: 0 auto;
                max-width: 1400px;
            }
        </style>
        """
        html_content = html_content.replace('</head>', style_section + '</head>')

        with open(output_filename, 'w', encoding='utf-8') as f:
            f.write(html_content)

        webbrowser.open('file://' + os.path.realpath(output_filename))

        trend_count = len(trend_data)
        messagebox.showinfo("성공", 
            f"'{output_filename}' 파일이 생성되었습니다.\n\n"
            f"✅ 메인 5개 라인 + 트렌드 {trend_count}개\n"
            f"✅ 실제값 라인에 전체 INFO 정보 포함\n"
            f"✅ 범례 클릭으로 표시/숨김 가능")
            
    except Exception as e:
        import traceback
        error_detail = traceback.format_exc()
        messagebox.showerror("오류 발생", f"그래프 생성 중 오류:\n{e}\n\n상세:\n{error_detail}")

# --------------------------------------------------------------------------
# GUI 애플리케이션
# --------------------------------------------------------------------------
class GraphApp:
    def __init__(self, root):
        self.root = root
        self.root.title("그래프 생성기 v4.2 (스크롤 개선)")
        self.root.geometry("1200x900")
        
        self.file_path = ""
        self.df_columns = []
        self.perf_values = None
        self.trend_widgets = {}

        # 전체 스크롤 가능한 메인 컨테이너
        main_canvas = tk.Canvas(root)
        scrollbar = tk.Scrollbar(root, orient="vertical", command=main_canvas.yview)
        self.scrollable_frame = tk.Frame(main_canvas)
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: main_canvas.configure(scrollregion=main_canvas.bbox("all"))
        )
        
        main_canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        main_canvas.configure(yscrollcommand=scrollbar.set)
        
        # 마우스 휠 스크롤 지원
        def _on_mousewheel(event):
            main_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        main_canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        main_canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # 상단 버튼 프레임
        top_button_frame = tk.Frame(self.scrollable_frame)
        top_button_frame.pack(fill='x', padx=10, pady=10)
        
        tk.Button(top_button_frame, text="📊 내용정보 입력", 
                 command=self.open_performance_window,
                 font=('Arial', 10, 'bold'),
                 bg='#2ECC71', fg='white',
                 width=15, height=2).pack(side='right', padx=5)

        # 1단계: 파일 선택
        self.step1_frame = tk.LabelFrame(self.scrollable_frame, text="✅ 1단계: 파일 선택", padx=10, pady=10)
        self.step1_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Button(self.step1_frame, text="CSV 파일 열기", command=self.select_file, 
                 font=('Helvetica', 10, 'bold'), bg='#e8f4f8').pack(side='left')
        self.file_label = tk.Label(self.step1_frame, text="선택된 파일이 없습니다.", fg="blue")
        self.file_label.pack(side='left', padx=10)
        
        # 2단계: 데이터 컬럼 선택
        self.step2_frame = tk.LabelFrame(self.scrollable_frame, text="🔒 2단계: 메인 데이터 컬럼 선택", padx=10, pady=10)
        self.step2_frame.pack(fill='x', padx=10, pady=5)
        self.create_step2_widgets()
        
        # 2.5단계: 트렌드 데이터 선택 (그룹별 정리)
        self.step2_5_frame = tk.LabelFrame(self.scrollable_frame, text="🔒 2.5단계: 트렌드 데이터 선택 (그룹별)", padx=10, pady=10)
        self.step2_5_frame.pack(fill='both', expand=True, padx=10, pady=5)  # ← fill='both', expand=True 추가!
        self.create_step2_5_widgets()

        # 3단계: 그래프 스타일 설정
        self.step3_frame = tk.LabelFrame(self.scrollable_frame, text="🔒 3단계: 그래프 스타일 설정", padx=10, pady=10)
        self.step3_frame.pack(fill='x', padx=10, pady=5)
        self.create_step3_widgets()
        
        # 4단계: 그래프 생성
        self.step4_frame = tk.LabelFrame(self.scrollable_frame, text="🔒 4단계: 그래프 생성", padx=10, pady=10)
        self.step4_frame.pack(fill='x', padx=10, pady=5)
        self.create_step4_widgets()
        
        # 초기 비활성화
        self.toggle_widgets_state(self.step2_frame, 'disabled')
        self.toggle_widgets_state(self.step2_5_frame, 'disabled')
        self.toggle_widgets_state(self.step3_frame, 'disabled')
        self.toggle_widgets_state(self.step4_frame, 'disabled')
    
    def open_performance_window(self):
        perf_window = PerformanceWindow(self.root)
        self.root.wait_window(perf_window.window)
        self.perf_values = perf_window.values
    
    def toggle_widgets_state(self, frame, state):
        for child in frame.winfo_children():
            try:
                child.config(state=state)
            except tk.TclError:
                pass

    def create_step2_widgets(self):
        labels = [
            "실제값 X축 (시간):", 
            "실제값 Y축 (값):", 
            "HUBROOM X축 (시간):",
            "HUBROOM Y축 (값):",
            "예측값1 X축 (시간):", 
            "예측값1 Y축 (값):",
            "예측값2 X축 (시간):",
            "예측값2 Y축 (값):",
            "예측값3 X축 (시간):",
            "예측값3 Y축 (값):"
        ]
        self.column_vars = [tk.StringVar() for _ in labels]
        self.column_menus = []

        for i, label_text in enumerate(labels):
            tk.Label(self.step2_frame, text=label_text, font=('Arial', 9)).grid(row=i, column=0, sticky='w', padx=5, pady=2)
            menu = tk.OptionMenu(self.step2_frame, self.column_vars[i], "")
            menu.config(width=30)
            menu.grid(row=i, column=1, sticky='ew', padx=5, pady=2)
            self.column_menus.append(menu)
    
    def create_step2_5_widgets(self):
        """트렌드 데이터 그룹별로 정리"""
        # 트렌드 데이터 그룹
        trend_groups = {
            '📦 MAXCAP 그룹': [
                'M14A_3F_CNV_MAXCAP',
                'M14B_7F_LFT_MAXCAP',
                'M16A_2F_LFT_MAXCAP',
                'M16A_3F_CNV_MAXCAP',
                'M16A_3F_LFT_MAXCAP',
                'M16A_3F_M14BLFT_MAXCAP',
                'M16A_6F_LFT_MAXCAP'
            ],
            '📊 UTIL 그룹': [
                'M16A_3F_STORAGE_UTIL'
            ],
            '🔄 JOB 그룹': [
                'M14A_3F_TO_HUB_JOB2',
                'M14A_3F_TO_HUB_JOB_ALT',
                'M14B_7F_TO_HUB_JOB2',
                'M14B_7F_TO_HUB_JOB_ALT',
                'M16A_2F_TO_HUB_JOB2',
                'M16A_2F_TO_HUB_JOB_ALT',
                'M16A_6F_TO_HUB_JOB',
                'M16A_6F_TO_HUB_JOB_ALT',
                'M16B_10F_TO_HUB_JOB'
            ]
        }
        
        # 스크롤 가능한 프레임 (가로/세로 스크롤)
        canvas = tk.Canvas(self.step2_5_frame, height=450)
        scrollbar_trend_v = tk.Scrollbar(self.step2_5_frame, orient="vertical", command=canvas.yview)
        scrollbar_trend_h = tk.Scrollbar(self.step2_5_frame, orient="horizontal", command=canvas.xview)
        scrollable_trend_frame = tk.Frame(canvas)
        
        scrollable_trend_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_trend_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar_trend_v.set, xscrollcommand=scrollbar_trend_h.set)
        
        # step2_5_frame의 grid weight 설정
        self.step2_5_frame.grid_rowconfigure(0, weight=1)
        self.step2_5_frame.grid_columnconfigure(0, weight=1)
        
        current_row = 0
        
        # 그룹별로 표시
        for group_name, trend_list in trend_groups.items():
            # 그룹 헤더
            group_frame = tk.LabelFrame(scrollable_trend_frame, text=group_name, 
                                       font=('Arial', 10, 'bold'), 
                                       bg='#E8F4F8', padx=10, pady=5)
            group_frame.grid(row=current_row, column=0, columnspan=4, sticky='ew', padx=5, pady=10)
            current_row += 1
            
            # 그룹 전체 선택/해제 버튼
            btn_frame = tk.Frame(group_frame)
            btn_frame.pack(fill='x', pady=5)
            
            group_vars = []
            
            def make_toggle_func(vars_list, value):
                return lambda: [v.set(value) for v in vars_list]
            
            # 헤더
            inner_frame = tk.Frame(group_frame)
            inner_frame.pack(fill='both', expand=True)
            
            tk.Label(inner_frame, text="사용", font=('Arial', 9, 'bold'), width=6).grid(row=0, column=0, padx=5, sticky='w')
            tk.Label(inner_frame, text="트렌드 이름", font=('Arial', 9, 'bold'), width=32).grid(row=0, column=1, sticky='w', padx=5)
            tk.Label(inner_frame, text="X축 (시간)", font=('Arial', 9, 'bold'), width=32).grid(row=0, column=2, padx=5, sticky='w')
            tk.Label(inner_frame, text="Y축 (값)", font=('Arial', 9, 'bold'), width=32).grid(row=0, column=3, padx=5, sticky='w')
            
            # 각 트렌드 데이터
            for idx, trend_name in enumerate(trend_list):
                row = idx + 1
                
                # 체크박스
                var = tk.BooleanVar(value=False)
                cb = tk.Checkbutton(inner_frame, variable=var)
                cb.grid(row=row, column=0, padx=5, pady=3, sticky='w')
                group_vars.append(var)
                
                # 이름
                tk.Label(inner_frame, text=trend_name, font=('Arial', 9), anchor='w', width=32).grid(row=row, column=1, sticky='w', padx=5, pady=3)
                
                # X축 선택
                x_var = tk.StringVar()
                x_menu = tk.OptionMenu(inner_frame, x_var, "")
                x_menu.config(width=30, font=('Arial', 9))
                x_menu.grid(row=row, column=2, padx=5, pady=3, sticky='ew')
                
                # Y축 선택
                y_var = tk.StringVar()
                y_menu = tk.OptionMenu(inner_frame, y_var, "")
                y_menu.config(width=30, font=('Arial', 9))
                y_menu.grid(row=row, column=3, padx=5, pady=3, sticky='ew')
                
                # trend_widgets에 저장
                self.trend_widgets[trend_name] = {
                    'name': trend_name,
                    'enabled': var,
                    'x_var': x_var,
                    'x_menu': x_menu,
                    'y_var': y_var,
                    'y_menu': y_menu
                }
            
            # 컬럼 너비 설정 - 확실하게 크게!
            inner_frame.grid_columnconfigure(0, minsize=60, weight=0)
            inner_frame.grid_columnconfigure(1, minsize=280, weight=0)
            inner_frame.grid_columnconfigure(2, minsize=300, weight=1)
            inner_frame.grid_columnconfigure(3, minsize=300, weight=1)
            
            # 그룹 전체 선택/해제 버튼 추가
            tk.Button(btn_frame, text=f"전체선택", 
                     command=make_toggle_func(group_vars, True),
                     bg='#3498DB', fg='white', font=('Arial', 8)).pack(side='left', padx=3)
            tk.Button(btn_frame, text=f"전체해제", 
                     command=make_toggle_func(group_vars, False),
                     bg='#E74C3C', fg='white', font=('Arial', 8)).pack(side='left', padx=3)
            
            # 그룹 자동 매칭 버튼
            def make_auto_match_func(trend_names, group_title):
                def auto_match_group():
                    if not self.df_columns:
                        messagebox.showwarning("경고", "먼저 CSV 파일을 선택해주세요!")
                        return
                    
                    # X축 선택 창 띄우기
                    select_window = tk.Toplevel(self.root)
                    select_window.title(f"{group_title} X축 선택")
                    select_window.geometry("400x200")
                    select_window.transient(self.root)
                    select_window.grab_set()
                    
                    # 중앙 배치
                    select_window.update_idletasks()
                    x = (select_window.winfo_screenwidth() // 2) - (400 // 2)
                    y = (select_window.winfo_screenheight() // 2) - (200 // 2)
                    select_window.geometry(f'400x200+{x}+{y}')
                    
                    selected_col = tk.StringVar()
                    
                    frame = tk.Frame(select_window)
                    frame.pack(fill='both', expand=True, padx=20, pady=20)
                    
                    tk.Label(frame, text=f"{group_title}의 X축(시간) 컬럼을 선택하세요:", 
                            font=('Arial', 10, 'bold')).pack(pady=10)
                    
                    # 드롭다운
                    col_menu = ttk.Combobox(frame, textvariable=selected_col, 
                                           values=self.df_columns, 
                                           font=('Arial', 10),
                                           width=40,
                                           state='readonly')
                    col_menu.pack(pady=10)
                    
                    # 날짜/시간 컬럼 자동 추천
                    time_keywords = ['날짜', 'date', 'time', '시간', 'datetime', 'timestamp']
                    for col in self.df_columns:
                        col_lower = col.lower()
                        if any(keyword in col_lower for keyword in time_keywords):
                            selected_col.set(col)
                            break
                    
                    def confirm_selection():
                        time_col = selected_col.get()
                        if not time_col:
                            messagebox.showwarning("경고", "X축 컬럼을 선택해주세요!")
                            return
                        
                        select_window.destroy()
                        
                        matched = 0
                        for trend_name in trend_names:
                            widget_dict = self.trend_widgets[trend_name]
                            # Y축 찾기
                            y_col_found = None
                            for col in self.df_columns:
                                if trend_name in col or col in trend_name:
                                    y_col_found = col
                                    break
                            
                            if y_col_found:
                                widget_dict['x_var'].set(time_col)
                                widget_dict['y_var'].set(y_col_found)
                                widget_dict['enabled'].set(True)
                                matched += 1
                        
                        messagebox.showinfo("자동 매칭", f"{group_title}: {matched}개 매칭 완료\nX축: {time_col}")
                    
                    btn_frame = tk.Frame(frame)
                    btn_frame.pack(pady=20)
                    
                    tk.Button(btn_frame, text="확인", command=confirm_selection,
                             bg='#3498DB', fg='white', font=('Arial', 10, 'bold'),
                             width=10).pack(side='left', padx=5)
                    tk.Button(btn_frame, text="취소", command=select_window.destroy,
                             bg='#95A5A6', fg='white', font=('Arial', 10, 'bold'),
                             width=10).pack(side='left', padx=5)
                
                return auto_match_group
            
            tk.Button(btn_frame, text=f"🔄 자동매칭", 
                     command=make_auto_match_func(trend_list, group_name),
                     bg='#9B59B6', fg='white', font=('Arial', 8)).pack(side='left', padx=3)
        
        # 캔버스와 스크롤바 배치 (가로/세로 스크롤)
        canvas.grid(row=0, column=0, sticky="nsew", padx=(10, 0), pady=(10, 0))
        scrollbar_trend_v.grid(row=0, column=1, sticky="ns", pady=(10, 0))
        scrollbar_trend_h.grid(row=1, column=0, sticky="ew", padx=(10, 0))
        
        # 자동 매칭 버튼 프레임
        auto_match_frame = tk.Frame(self.step2_5_frame)
        auto_match_frame.grid(row=2, column=0, columnspan=2, sticky='ew', pady=10, padx=10)
        
        tk.Button(auto_match_frame, text="🔄 전체 자동 매칭", 
                 command=self.auto_match_all_trends,
                 bg='#9B59B6', fg='white', 
                 font=('Arial', 10, 'bold'),
                 width=20, height=2).pack(pady=5)
        
        tk.Label(auto_match_frame, 
                text="※ 자동 매칭: 트렌드 이름과 일치하는 Y축 컬럼 + 날짜/시간 X축을 자동 선택",
                font=('Arial', 8), fg='#666').pack()
            
    def create_step3_widgets(self):
        tk.Label(self.step3_frame, text="그래프 제목:").grid(row=0, column=0, sticky='w', padx=5, pady=2)
        self.title_var = tk.StringVar(value="사용자 정의 그래프")
        tk.Entry(self.step3_frame, textvariable=self.title_var, width=50).grid(row=0, column=1, columnspan=3, sticky='ew', padx=5, pady=2)
        
        # 실제값
        tk.Label(self.step3_frame, text="[실제값]", font=('Arial', 9, 'bold')).grid(row=1, column=0, sticky='w', padx=5, pady=5)
        self.actual_color_var = tk.StringVar(value='#1f77b4')
        self.actual_color_btn = tk.Button(self.step3_frame, text="색상", 
                                         command=lambda: self.choose_color(self.actual_color_var, self.actual_color_btn), 
                                         bg=self.actual_color_var.get())
        self.actual_color_btn.grid(row=1, column=1, padx=5)
        self.actual_style_var = tk.StringVar(value='Solid')
        tk.OptionMenu(self.step3_frame, self.actual_style_var, 'Solid', 'Dash', 'Dot').grid(row=1, column=2, padx=5)

        # HUBROOM
        tk.Label(self.step3_frame, text="[HUBROOM]", font=('Arial', 9, 'bold')).grid(row=2, column=0, sticky='w', padx=5, pady=5)
        self.hubroom_color_var = tk.StringVar(value='#9467bd')
        self.hubroom_color_btn = tk.Button(self.step3_frame, text="색상", 
                                         command=lambda: self.choose_color(self.hubroom_color_var, self.hubroom_color_btn), 
                                         bg=self.hubroom_color_var.get())
        self.hubroom_color_btn.grid(row=2, column=1, padx=5)
        self.hubroom_style_var = tk.StringVar(value='Solid')
        tk.OptionMenu(self.step3_frame, self.hubroom_style_var, 'Solid', 'Dash', 'Dot').grid(row=2, column=2, padx=5)

        # 예측값1
        tk.Label(self.step3_frame, text="[예측값1]", font=('Arial', 9, 'bold')).grid(row=3, column=0, sticky='w', padx=5, pady=5)
        self.predicted1_color_var = tk.StringVar(value='#ff7f0e')
        self.predicted1_color_btn = tk.Button(self.step3_frame, text="색상", 
                                           command=lambda: self.choose_color(self.predicted1_color_var, self.predicted1_color_btn), 
                                           bg=self.predicted1_color_var.get())
        self.predicted1_color_btn.grid(row=3, column=1, padx=5)
        self.predicted1_style_var = tk.StringVar(value='Dash')
        tk.OptionMenu(self.step3_frame, self.predicted1_style_var, 'Solid', 'Dash', 'Dot').grid(row=3, column=2, padx=5)
        
        # 예측값2
        tk.Label(self.step3_frame, text="[예측값2]", font=('Arial', 9, 'bold')).grid(row=4, column=0, sticky='w', padx=5, pady=5)
        self.predicted2_color_var = tk.StringVar(value='#2ca02c')
        self.predicted2_color_btn = tk.Button(self.step3_frame, text="색상", 
                                           command=lambda: self.choose_color(self.predicted2_color_var, self.predicted2_color_btn), 
                                           bg=self.predicted2_color_var.get())
        self.predicted2_color_btn.grid(row=4, column=1, padx=5)
        self.predicted2_style_var = tk.StringVar(value='Dot')
        tk.OptionMenu(self.step3_frame, self.predicted2_style_var, 'Solid', 'Dash', 'Dot').grid(row=4, column=2, padx=5)
        
        # 예측값3
        tk.Label(self.step3_frame, text="[예측값3]", font=('Arial', 9, 'bold')).grid(row=5, column=0, sticky='w', padx=5, pady=5)
        self.predicted3_color_var = tk.StringVar(value='#d62728')
        self.predicted3_color_btn = tk.Button(self.step3_frame, text="색상", 
                                           command=lambda: self.choose_color(self.predicted3_color_var, self.predicted3_color_btn), 
                                           bg=self.predicted3_color_var.get())
        self.predicted3_color_btn.grid(row=5, column=1, padx=5)
        self.predicted3_style_var = tk.StringVar(value='Dash')
        tk.OptionMenu(self.step3_frame, self.predicted3_style_var, 'Solid', 'Dash', 'Dot').grid(row=5, column=2, padx=5)
        
        # 리미트선
        tk.Label(self.step3_frame, text="[🔴 리미트선]", font=('Arial', 9, 'bold')).grid(row=6, column=0, sticky='w', padx=5, pady=5)
        tk.Label(self.step3_frame, text="값:").grid(row=6, column=1, sticky='e', padx=(0, 5))
        self.limit_value_var = tk.StringVar(value="300")
        tk.Entry(self.step3_frame, textvariable=self.limit_value_var, width=10).grid(row=6, column=2, sticky='w', padx=5)

    def create_step4_widgets(self):
        self.generate_button = tk.Button(self.step4_frame, text="🎨 그래프 생성 실행", 
                                        command=self.generate_graph, 
                                        font=('Helvetica', 12, 'bold'), 
                                        bg='#d3ffd3',
                                        height=2)
        self.generate_button.pack(fill='x')

    def choose_color(self, color_var, button):
        color_code = colorchooser.askcolor(title="색상 선택")[1]
        if color_code:
            color_var.set(color_code)
            button.config(bg=color_code)
    
    def auto_match_all_trends(self):
        """모든 트렌드 데이터의 X축/Y축을 자동으로 매칭 - X축은 사용자 선택"""
        if not self.df_columns:
            messagebox.showwarning("경고", "먼저 CSV 파일을 선택해주세요!")
            return
        
        # X축 선택 창 띄우기
        select_window = tk.Toplevel(self.root)
        select_window.title("X축(시간) 컬럼 선택")
        select_window.geometry("400x200")
        select_window.transient(self.root)
        select_window.grab_set()
        
        # 중앙 배치
        select_window.update_idletasks()
        x = (select_window.winfo_screenwidth() // 2) - (400 // 2)
        y = (select_window.winfo_screenheight() // 2) - (200 // 2)
        select_window.geometry(f'400x200+{x}+{y}')
        
        selected_col = tk.StringVar()
        
        frame = tk.Frame(select_window)
        frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        tk.Label(frame, text="모든 트렌드 데이터의 X축(시간)으로 사용할 컬럼을 선택하세요:", 
                font=('Arial', 10, 'bold')).pack(pady=10)
        
        # 드롭다운
        col_menu = ttk.Combobox(frame, textvariable=selected_col, 
                               values=self.df_columns, 
                               font=('Arial', 10),
                               width=40,
                               state='readonly')
        col_menu.pack(pady=10)
        
        # 날짜/시간 컬럼 자동 추천
        time_keywords = ['날짜', 'date', 'time', '시간', 'datetime', 'timestamp']
        for col in self.df_columns:
            col_lower = col.lower()
            if any(keyword in col_lower for keyword in time_keywords):
                selected_col.set(col)
                break
        
        def confirm_selection():
            time_col = selected_col.get()
            if not time_col:
                messagebox.showwarning("경고", "X축 컬럼을 선택해주세요!")
                return
            
            select_window.destroy()
            
            # 각 트렌드에 대해 자동 매칭
            matched_count = 0
            for trend_name, widget_dict in self.trend_widgets.items():
                # Y축: 트렌드 이름과 일치하는 컬럼 찾기
                y_col_found = None
                for col in self.df_columns:
                    if trend_name in col or col in trend_name:
                        y_col_found = col
                        break
                
                if y_col_found:
                    # X축 설정
                    widget_dict['x_var'].set(time_col)
                    # Y축 설정
                    widget_dict['y_var'].set(y_col_found)
                    # 체크박스 자동 선택
                    widget_dict['enabled'].set(True)
                    matched_count += 1
            
            messagebox.showinfo("자동 매칭 완료", 
                               f"총 {matched_count}개의 트렌드 데이터가 자동 매칭되었습니다.\n\n"
                               f"X축: {time_col}\n"
                               f"Y축: 각 트렌드 이름과 일치하는 컬럼")
        
        btn_frame = tk.Frame(frame)
        btn_frame.pack(pady=20)
        
        tk.Button(btn_frame, text="확인", command=confirm_selection,
                 bg='#3498DB', fg='white', font=('Arial', 10, 'bold'),
                 width=10).pack(side='left', padx=5)
        tk.Button(btn_frame, text="취소", command=select_window.destroy,
                 bg='#95A5A6', fg='white', font=('Arial', 10, 'bold'),
                 width=10).pack(side='left', padx=5)

    def select_file(self):
        path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
        if not path: return
        
        self.file_path = path
        filename = os.path.basename(path)
        self.file_label.config(text=f"선택됨: {filename}")
        
        try:
            df = read_csv_safe(self.file_path)
            self.df_columns = df.columns.tolist()
            
            # 메인 데이터 컬럼 메뉴 업데이트
            for i, menu in enumerate(self.column_menus):
                menu['menu'].delete(0, 'end')
                for col in self.df_columns:
                    menu['menu'].add_command(label=col, command=tk._setit(self.column_vars[i], col))
            
            # 트렌드 데이터 컬럼 메뉴 업데이트
            for widget_dict in self.trend_widgets.values():
                # X축
                widget_dict['x_menu']['menu'].delete(0, 'end')
                for col in self.df_columns:
                    widget_dict['x_menu']['menu'].add_command(label=col, command=tk._setit(widget_dict['x_var'], col))
                
                # Y축
                widget_dict['y_menu']['menu'].delete(0, 'end')
                for col in self.df_columns:
                    widget_dict['y_menu']['menu'].add_command(label=col, command=tk._setit(widget_dict['y_var'], col))
            
            # 자동 추천
            patterns = [
                ['날짜', 'date', 'time'],
                ['실제값', 'actual', 'real'],
                ['hubroom', 'hub'],
                ['hubroom', 'hub'],
                ['예측날짜', 'pred_date', 'forecast'],
                ['예측값', 'predicted', 'pred'],
                ['예측날짜', 'pred_date', 'forecast', '2'],
                ['예측값', 'predicted', 'pred', '2'],
                ['예측날짜', 'pred_date', 'forecast', '3'],
                ['예측값', 'predicted', 'pred', '3']
            ]
            
            for idx, pattern_list in enumerate(patterns):
                for col in self.df_columns:
                    col_lower = col.lower()
                    if any(p in col_lower for p in pattern_list):
                        self.column_vars[idx].set(col)
                        break

            self.step2_frame.config(text="✅ 2단계: 메인 데이터 컬럼 선택")
            self.toggle_widgets_state(self.step2_frame, 'normal')
            self.step2_5_frame.config(text="✅ 2.5단계: 트렌드 데이터 선택 (그룹별)")
            self.toggle_widgets_state(self.step2_5_frame, 'normal')
            self.step3_frame.config(text="✅ 3단계: 그래프 스타일 설정")
            self.toggle_widgets_state(self.step3_frame, 'normal')
            self.step4_frame.config(text="✅ 4단계: 그래프 생성")
            self.toggle_widgets_state(self.step4_frame, 'normal')

        except Exception as e:
            messagebox.showerror("오류", f"CSV 파일을 읽는 데 실패했습니다:\n{e}")

    def generate_graph(self):
        # 선택된 트렌드 데이터 수집
        selected_trends = []
        for widget_dict in self.trend_widgets.values():
            if widget_dict['enabled'].get():
                x_col = widget_dict['x_var'].get()
                y_col = widget_dict['y_var'].get()
                if x_col and y_col:
                    selected_trends.append({
                        'name': widget_dict['name'],
                        'x_col': x_col,
                        'y_col': y_col
                    })
        
        params = {
            'file_path': self.file_path, 
            'title': self.title_var.get(),
            'actual_x': self.column_vars[0].get(), 
            'actual_y': self.column_vars[1].get(),
            'hubroom_x': self.column_vars[2].get(),
            'hubroom_y': self.column_vars[3].get(),
            'predicted1_x': self.column_vars[4].get(), 
            'predicted1_y': self.column_vars[5].get(),
            'predicted2_x': self.column_vars[6].get(),
            'predicted2_y': self.column_vars[7].get(),
            'predicted3_x': self.column_vars[8].get(),
            'predicted3_y': self.column_vars[9].get(),
            'actual_color': self.actual_color_var.get(), 
            'actual_style': self.actual_style_var.get(),
            'hubroom_color': self.hubroom_color_var.get(),
            'hubroom_style': self.hubroom_style_var.get(),
            'predicted1_color': self.predicted1_color_var.get(), 
            'predicted1_style': self.predicted1_style_var.get(),
            'predicted2_color': self.predicted2_color_var.get(),
            'predicted2_style': self.predicted2_style_var.get(),
            'predicted3_color': self.predicted3_color_var.get(),
            'predicted3_style': self.predicted3_style_var.get(),
            'limit_value': self.limit_value_var.get(),
            'trend_data': selected_trends
        }
        
        if not all([params['actual_x'], params['actual_y'], 
                   params['hubroom_x'], params['hubroom_y'],
                   params['predicted1_x'], params['predicted1_y'],
                   params['predicted2_x'], params['predicted2_y'],
                   params['predicted3_x'], params['predicted3_y']]):
            messagebox.showwarning("경고", "2단계에서 모든 메인 데이터 축의 컬럼을 선택해주세요.")
            return
        
        if not self.perf_values:
            self.perf_values = {
                'mae': '30.23',
                'rmse': '36.02',
                'r2': '0.72',
                'other_info': '기타 정보가 입력되지 않았습니다.'
            }
            
        create_graph(params, self.perf_values)

if __name__ == "__main__":
    root = tk.Tk()
    app = GraphApp(root)
    root.mainloop()