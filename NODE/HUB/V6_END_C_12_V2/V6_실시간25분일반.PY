# -*- coding: utf-8 -*-
"""
V6 Ïã§ÏãúÍ∞Ñ ÏòàÏ∏° ÏΩîÎìú - 25Î∂Ñ Î≤ÑÏ†Ñ
- 30Î∂Ñ ÏãúÌÄÄÏä§ ‚Üí 25Î∂Ñ ÌõÑ ÏòàÏ∏°
- Momentum Features Ìè¨Ìï®
- ÏûÑÍ≥ÑÍ∞í 280
- Í∞ÄÏ§ëÏπò 5Î∞∞ ÌïôÏäµ Î™®Îç∏ ÏÇ¨Ïö©
"""

import numpy as np
import pandas as pd
import pickle
from datetime import datetime, timedelta
import os

# ÌòÑ ÎîîÎ†âÌÑ∞Î¶¨Î•º Í∏∞Ï§ÄÏúºÎ°ú Í≤ΩÎ°ú ÏÑ§Ï†ï
script_dir = os.path.dirname(os.path.abspath(__file__))
model_dir = os.path.join(script_dir, 'model', 'xgboost_ÏôÑÎ≤ΩÎ≤ÑÏ†Ñ_Í∞ÄÏ§ëÏπò5Î∞∞_ÏûÑÍ≥ÑÍ∞í280_momentum_25min.pkl')
data_dir = os.path.join(script_dir, 'data', 'HUBROOM_PIVOT_DATA.csv')

# V6 Feature Ïª¨Îüº Ï†ïÏùò
FEATURE_COLS = {
    'storage': ['M16A_3F_STORAGE_UTIL'],
    'fs_storage': ['CD_M163FSTORAGEUSE', 'CD_M163FSTORAGETOTAL', 'CD_M163FSTORAGEUTIL'],
    'hub': ['HUBROOMTOTAL'],
    'cmd': ['M16A_3F_CMD', 'M16A_6F_TO_HUB_CMD'],
    'inflow': ['M16A_6F_TO_HUB_JOB', 'M16A_2F_TO_HUB_JOB2', 'M14A_3F_TO_HUB_JOB2'],
    'outflow': ['M16A_3F_TO_M16A_6F_JOB', 'M16A_3F_TO_M16A_2F_JOB', 'M16A_3F_TO_M14A_3F_JOB'],
    'maxcapa': ['M16A_6F_LFT_MAXCAPA', 'M16A_2F_LFT_MAXCAPA']
}

def realtime_prediction_25min():
    """V6 Î™®Îç∏ Í∏∞Î∞ò Ïã§ÏãúÍ∞Ñ ÏòàÏ∏° - 25Î∂Ñ Î≤ÑÏ†Ñ"""
    # Î™®Îç∏ Î°úÎìú
    try:
        with open(model_dir, 'rb') as f:
            model = pickle.load(f)
    except:
        return None, "model is not found"
   
    # Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    try:
        df = pd.read_csv(data_dir, on_bad_lines='skip')
    except FileNotFoundError:
        return None, "file is not found"
    except Exception as e:
        return None, "exception occurred while reading file"
   
    # ÏµúÍ∑º 30Í∞ú Îç∞Ïù¥ÌÑ∞
    recent_30 = df.tail(30).copy()
    TARGET_COL = 'CURRENT_M16A_3F_JOB_2'
   
    if TARGET_COL not in recent_30.columns:
        return None, "target column is not included"
   
    seq_target = recent_30[TARGET_COL].values
   
    # STAT_DT Ï≤òÎ¶¨
    if 'STAT_DT' in recent_30.columns:
        try:
            recent_30['STAT_DT'] = pd.to_datetime(recent_30['STAT_DT'].astype(str), format='%Y%m%d%H%M')
        except:
            base_time = datetime(2024, 1, 1, 0, 0)
            recent_30['STAT_DT'] = [base_time + timedelta(minutes=i) for i in range(len(recent_30))]
   
    seq_end = recent_30['STAT_DT'].iloc[-1]
    prediction_time = seq_end + timedelta(minutes=25)  # ‚úÖ 25Î∂Ñ ÌõÑ
   
    # ===== Feature ÏÉùÏÑ± (V6ÏôÄ ÎèôÏùº) =====
    
    # 1. ÌÉÄÍ≤ü Í∏∞Î≥∏ ÌÜµÍ≥Ñ
    features = {
        'target_mean': np.mean(seq_target),
        'target_std': np.std(seq_target),
        'target_max': np.max(seq_target),
        'target_min': np.min(seq_target),
        'target_last_value': seq_target[-1],
        'target_last_5_mean': np.mean(seq_target[-5:]),
        'target_slope': np.polyfit(np.arange(30), seq_target, 1)[0],
    }
   
    # 2. üÜï Momentum Features
    features['target_acceleration'] = (seq_target[-5:].mean() - seq_target[-10:-5].mean()) / 5
    features['target_is_rising'] = 1 if seq_target[-1] > seq_target[-5] else 0
    features['target_rapid_rise'] = 1 if (seq_target[-1] - seq_target[-5] > 10) else 0
    features['target_last_10_mean'] = np.mean(seq_target[-10:])
   
    # 3. Í∞Å Ïª¨Îüº Í∑∏Î£πÎ≥Ñ Features
    for group_name, cols in FEATURE_COLS.items():
        for col in cols:
            if col not in recent_30.columns:
                continue
           
            col_seq = recent_30[col].values
           
            if group_name == 'maxcapa':
                features[f'{col}_last_value'] = col_seq[-1]
           
            elif group_name in ['cmd', 'storage', 'fs_storage', 'hub']:
                features[f'{col}_mean'] = np.mean(col_seq)
                features[f'{col}_std'] = np.std(col_seq)
                features[f'{col}_max'] = np.max(col_seq)
                features[f'{col}_min'] = np.min(col_seq)
                features[f'{col}_last_value'] = col_seq[-1]
                features[f'{col}_last_5_mean'] = np.mean(col_seq[-5:])
                features[f'{col}_slope'] = np.polyfit(np.arange(30), col_seq, 1)[0]
           
            else:
                features[f'{col}_mean'] = np.mean(col_seq)
                features[f'{col}_last_value'] = col_seq[-1]
                features[f'{col}_slope'] = np.polyfit(np.arange(30), col_seq, 1)[0]
   
    # 4. FS Storage ÌäπÏàò Features
    if 'CD_M163FSTORAGEUSE' in recent_30.columns and 'CD_M163FSTORAGETOTAL' in recent_30.columns and 'CD_M163FSTORAGEUTIL' in recent_30.columns:
        use_seq = recent_30['CD_M163FSTORAGEUSE'].values
        total_seq = recent_30['CD_M163FSTORAGETOTAL'].values
        util_seq = recent_30['CD_M163FSTORAGEUTIL'].values
       
        features['storage_use_rate'] = (use_seq[-1] - use_seq[0]) / 30
        features['storage_remaining'] = total_seq[-1] - use_seq[-1]
        features['storage_util_last'] = util_seq[-1]
        features['storage_util_high'] = 1 if util_seq[-1] >= 7 else 0
        features['storage_util_critical'] = 1 if util_seq[-1] >= 10 else 0
   
    # 5. HUBROOMTOTAL ÌäπÏàò Features
    if 'HUBROOMTOTAL' in recent_30.columns:
        hub_seq = recent_30['HUBROOMTOTAL'].values
        hub_last = hub_seq[-1]
       
        features['hub_critical'] = 1 if hub_last < 590 else 0
        features['hub_high'] = 1 if hub_last < 610 else 0
        features['hub_warning'] = 1 if hub_last < 620 else 0
        features['hub_decrease_rate'] = (hub_seq[0] - hub_last) / 30
       
        if 'CD_M163FSTORAGEUTIL' in recent_30.columns:
            storage_util_last = recent_30['CD_M163FSTORAGEUTIL'].iloc[-1]
            features['hub_storage_risk'] = 1 if (hub_last < 610 and storage_util_last >= 7) else 0
   
    # 6. Ïú†ÏûÖ-Ïú†Ï∂ú, CMD
    inflow_sum = sum(recent_30[col].iloc[-1] for col in FEATURE_COLS['inflow'] if col in recent_30.columns)
    outflow_sum = sum(recent_30[col].iloc[-1] for col in FEATURE_COLS['outflow'] if col in recent_30.columns)
    features['net_flow'] = inflow_sum - outflow_sum
   
    cmd_sum = sum(recent_30[col].iloc[-1] for col in FEATURE_COLS['cmd'] if col in recent_30.columns)
    features['total_cmd'] = cmd_sum
    features['total_cmd_low'] = 1 if cmd_sum < 220 else 0
    features['total_cmd_very_low'] = 1 if cmd_sum < 200 else 0
   
    # 7. HUB √ó CMD Î≥µÌï©
    if 'HUBROOMTOTAL' in recent_30.columns:
        hub_last = recent_30['HUBROOMTOTAL'].iloc[-1]
        features['hub_cmd_bottleneck'] = 1 if (hub_last < 610 and cmd_sum < 220) else 0
   
    # 8. Storage Util ÏúÑÌóò
    if 'M16A_3F_STORAGE_UTIL' in recent_30.columns:
        storage_util = recent_30['M16A_3F_STORAGE_UTIL'].iloc[-1]
        features['storage_util_critical'] = 1 if storage_util >= 205 else 0
        features['storage_util_high_risk'] = 1 if storage_util >= 207 else 0
   
    # 9. üî• Í∏âÏ¶ù ÏúÑÌóòÎèÑ Ï†êÏàò
    features['surge_risk_score'] = (
        features.get('hub_high', 0) * 3 +
        features.get('storage_util_critical', 0) * 2 +
        features.get('total_cmd_low', 0) * 1 +
        features.get('storage_util_high', 0) * 1
    )
   
    # 10. üÜï Í∏âÏ¶ù ÏûÑÎ∞ï Ïã†Ìò∏
    features['surge_imminent'] = 1 if (
        seq_target[-1] > 272 and
        features.get('target_acceleration', 0) > 0.2 and
        features.get('hub_high', 0) == 1
    ) else 0
   
    X_pred = pd.DataFrame([features])
   
    # ÏòàÏ∏°
    prediction = model.predict(X_pred)[0]
   
    # ÏÉÅÌÉú Í≤∞Ï†ï
    if prediction >= 300:
        status = "CRITICAL"
    elif prediction >= 280:
        status = "WARNING"
    elif prediction >= 270:
        status = "CAUTION"
    else:
        status = "NORMAL"
   
    return prediction, status

def predict_realtime_25min():
    """Ïã§ÏãúÍ∞Ñ ÏòàÏ∏° Ïã§Ìñâ Î∞è Ï∂úÎ†• - 25Î∂Ñ"""
    prediction, status_text = realtime_prediction_25min()
   
    if prediction is None:
        row = {"EXCEPT": status_text}
        print([row])
    else:
        surge_warning = int(prediction >= 280)
        extreme_warning = int(prediction >= 300)
       
        row = {
            "PREDICTVAL": round(prediction, 2),
            "SURGE_WARNING": surge_warning,
            "EXTREME_WARNING": extreme_warning,
            "MODEL": "V6_MOMENTUM_280_25MIN",  # ‚úÖ 25Î∂Ñ Î™®Îç∏
            "STATUS": status_text,
            "PREDICTION_HORIZON": "25MIN",  # ‚úÖ 25Î∂Ñ ÏòàÏ∏°
            "THRESHOLD_280": "V6_PRIMARY"
        }
        print([row])

if __name__ == '__main__':
    predict_realtime_25min()