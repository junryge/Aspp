# -*- coding: utf-8 -*-
"""
V4 데이터 검증 결과를 CSV로 출력하는 코드
검증 코드 실행 결과를 바탕으로 상세 분석표 생성
"""

import pandas as pd
import numpy as np
import os
from datetime import datetime

def generate_v4_validation_report():
    """V4 검증 결과 CSV 생성"""
    
    print("="*80)
    print("📊 V4 데이터 검증 결과 CSV 생성")
    print(f"📅 생성 시간: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*80)
    
    # 데이터 로드 (검증용)
    data_path = 'data/HUB_0509_TO_0730_DATA.CSV'
    
    # 실제 컬럼 존재 여부 확인
    existing_cols = set()
    if os.path.exists(data_path):
        df = pd.read_csv(data_path)
        existing_cols = set(df.columns)
    
    # 컬럼별 상세 정보 정의
    columns_info = [
        # V3 기본 컬럼 (9개)
        {"No": 1, "컬럼명": "CURRENT_M16A_3F_JOB_2", "카테고리": "타겟", "V3사용": "O", "V4필수도": "필수", 
         "점수": 100, "300+기여도": 100, "타겟상관도": 100, "유입영향도": 0, "유출영향도": 0, 
         "물리법칙": "핵심", "대체가능성": "불가"},
         
        {"No": 2, "컬럼명": "M16A_6F_TO_HUB_JOB", "카테고리": "유입", "V3사용": "O", "V4필수도": "필수", 
         "점수": 70, "300+기여도": 70, "타겟상관도": 65, "유입영향도": 100, "유출영향도": 0, 
         "물리법칙": "핵심", "대체가능성": "불가"},
         
        {"No": 3, "컬럼명": "M16A_2F_TO_HUB_JOB2", "카테고리": "유입", "V3사용": "O", "V4필수도": "필수", 
         "점수": 65, "300+기여도": 65, "타겟상관도": 60, "유입영향도": 100, "유출영향도": 0, 
         "물리법칙": "핵심", "대체가능성": "불가"},
         
        {"No": 4, "컬럼명": "M14A_3F_TO_HUB_JOB2", "카테고리": "유입", "V3사용": "O", "V4필수도": "필수", 
         "점수": 65, "300+기여도": 65, "타겟상관도": 60, "유입영향도": 100, "유출영향도": 0, 
         "물리법칙": "핵심", "대체가능성": "불가"},
         
        {"No": 5, "컬럼명": "M14B_7F_TO_HUB_JOB2", "카테고리": "유입", "V3사용": "O", "V4필수도": "필수", 
         "점수": 65, "300+기여도": 65, "타겟상관도": 60, "유입영향도": 100, "유출영향도": 0, 
         "물리법칙": "핵심", "대체가능성": "불가"},
         
        {"No": 6, "컬럼명": "M16A_3F_TO_M16A_6F_JOB", "카테고리": "유출", "V3사용": "O", "V4필수도": "필수", 
         "점수": 60, "300+기여도": 60, "타겟상관도": 55, "유입영향도": 0, "유출영향도": 100, 
         "물리법칙": "핵심", "대체가능성": "불가"},
         
        {"No": 7, "컬럼명": "M16A_3F_TO_M16A_2F_JOB", "카테고리": "유출", "V3사용": "O", "V4필수도": "필수", 
         "점수": 55, "300+기여도": 55, "타겟상관도": 50, "유입영향도": 0, "유출영향도": 100, 
         "물리법칙": "핵심", "대체가능성": "불가"},
         
        {"No": 8, "컬럼명": "M16A_3F_TO_M14A_3F_JOB", "카테고리": "유출", "V3사용": "O", "V4필수도": "필수", 
         "점수": 55, "300+기여도": 55, "타겟상관도": 50, "유입영향도": 0, "유출영향도": 100, 
         "물리법칙": "핵심", "대체가능성": "불가"},
         
        {"No": 9, "컬럼명": "M16A_3F_TO_M14B_7F_JOB", "카테고리": "유출", "V3사용": "O", "V4필수도": "필수", 
         "점수": 55, "300+기여도": 55, "타겟상관도": 50, "유입영향도": 0, "유출영향도": 100, 
         "물리법칙": "핵심", "대체가능성": "불가"},
         
        # V4 핵심 추가 컬럼 (4개)
        {"No": 10, "컬럼명": "M16A_3F_STORAGE_UTIL", "카테고리": "극단값지표", "V3사용": "X", "V4필수도": "필수", 
         "점수": 95, "300+기여도": 95, "타겟상관도": 85, "유입영향도": 30, "유출영향도": 20, 
         "물리법칙": "핵심", "대체가능성": "가능"},
         
        {"No": 11, "컬럼명": "M16A_3F_CMD", "카테고리": "극단값지표", "V3사용": "X", "V4필수도": "필수", 
         "점수": 85, "300+기여도": 85, "타겟상관도": 75, "유입영향도": 40, "유출영향도": 35, 
         "물리법칙": "핵심", "대체가능성": "부분가능"},
         
        {"No": 12, "컬럼명": "M16A_3F_VHL_ERR_CNT", "카테고리": "극단값지표", "V3사용": "X", "V4필수도": "필수", 
         "점수": 80, "300+기여도": 80, "타겟상관도": 70, "유입영향도": 25, "유출영향도": 30, 
         "물리법칙": "핵심", "대체가능성": "불가"},
         
        {"No": 13, "컬럼명": "CURRENT_M16A_3F_JOB", "카테고리": "재고부분", "V3사용": "X", "V4필수도": "권장", 
         "점수": 70, "300+기여도": 70, "타겟상관도": 90, "유입영향도": 20, "유출영향도": 20, 
         "물리법칙": "보조", "대체가능성": "불가"},
         
        # V4 권장 컬럼 (6개)
        {"No": 14, "컬럼명": "M16A_6F_TO_HUB_CMD", "카테고리": "이동CMD", "V3사용": "X", "V4필수도": "권장", 
         "점수": 55, "300+기여도": 55, "타겟상관도": 45, "유입영향도": 80, "유출영향도": 0, 
         "물리법칙": "보조", "대체가능성": "부분가능"},
         
        {"No": 15, "컬럼명": "M14A_3F_TO_HUB_CMD", "카테고리": "이동CMD", "V3사용": "X", "V4필수도": "권장", 
         "점수": 50, "300+기여도": 50, "타겟상관도": 40, "유입영향도": 80, "유출영향도": 0, 
         "물리법칙": "보조", "대체가능성": "부분가능"},
         
        {"No": 16, "컬럼명": "M14B_7F_TO_HUB_CMD", "카테고리": "이동CMD", "V3사용": "X", "V4필수도": "권장", 
         "점수": 50, "300+기여도": 50, "타겟상관도": 40, "유입영향도": 80, "유출영향도": 0, 
         "물리법칙": "보조", "대체가능성": "부분가능"},
         
        {"No": 17, "컬럼명": "M16A_6F_LFT_MAXCAPA_UTIL", "카테고리": "병목지표", "V3사용": "X", "V4필수도": "권장", 
         "점수": 60, "300+기여도": 60, "타겟상관도": 45, "유입영향도": 60, "유출영향도": 40, 
         "물리법칙": "보조", "대체가능성": "가능"},
         
        {"No": 18, "컬럼명": "M16A_3F_LFT_MAXCAPA_UTIL", "카테고리": "병목지표", "V3사용": "X", "V4필수도": "권장", 
         "점수": 60, "300+기여도": 60, "타겟상관도": 45, "유입영향도": 40, "유출영향도": 60, 
         "물리법칙": "보조", "대체가능성": "가능"},
         
        {"No": 19, "컬럼명": "ALL_TO_HUB_JOB", "카테고리": "집계", "V3사용": "X", "V4필수도": "권장", 
         "점수": 60, "300+기여도": 60, "타겟상관도": 55, "유입영향도": 90, "유출영향도": 0, 
         "물리법칙": "보조", "대체가능성": "생성가능"},
    ]
    
    # DataFrame 생성
    df_result = pd.DataFrame(columns_info)
    
    # 검증 결과 추가
    def check_column_status(col_name):
        if col_name in existing_cols:
            return "✅존재"
        else:
            return "❌없음"
    
    df_result['검증결과'] = df_result['컬럼명'].apply(check_column_status)
    
    # 권장조치 추가
    def get_recommendation(row):
        if row['검증결과'] == "✅존재":
            if row['V3사용'] == "O":
                return "유지"
            else:
                return "V4추가"
        else:
            if row['V4필수도'] == "필수":
                if row['대체가능성'] == "가능":
                    return "대체생성"
                elif row['대체가능성'] == "부분가능":
                    return "부분대체"
                else:
                    return "데이터요청"
            else:
                return "선택적"
    
    df_result['권장조치'] = df_result.apply(get_recommendation, axis=1)
    
    # 점수 계산 추가
    v3_total = df_result[df_result['V3사용'] == 'O']['점수'].sum()
    v4_critical = df_result[(df_result['V4필수도'] == '필수') & (df_result['V3사용'] == 'X')]['점수'].sum()
    v4_recommended = df_result[(df_result['V4필수도'] == '권장') & (df_result['V3사용'] == 'X')]['점수'].sum()
    
    # 총점 계산
    available_score = df_result[df_result['검증결과'] == '✅존재']['점수'].sum()
    total_score = df_result['점수'].sum()
    
    # CSV 파일로 저장
    output_file = 'v4_validation_report.csv'
    df_result.to_csv(output_file, index=False, encoding='utf-8-sig')
    print(f"\n✅ CSV 파일 생성 완료: {output_file}")
    
    # 요약 정보 출력
    print("\n📊 검증 요약:")
    print("-"*40)
    print(f"전체 컬럼 수: {len(df_result)}개")
    print(f"V3 사용 컬럼: {len(df_result[df_result['V3사용'] == 'O'])}개")
    print(f"V4 필수 추가: {len(df_result[(df_result['V4필수도'] == '필수') & (df_result['V3사용'] == 'X')])}개")
    print(f"V4 권장 추가: {len(df_result[(df_result['V4필수도'] == '권장') & (df_result['V3사용'] == 'X')])}개")
    print(f"\n존재하는 컬럼: {len(df_result[df_result['검증결과'] == '✅존재'])}개")
    print(f"누락된 컬럼: {len(df_result[df_result['검증결과'] == '❌없음'])}개")
    
    # 점수 분석
    print("\n📈 점수 분석:")
    print("-"*40)
    print(f"V3 기본 점수: {v3_total}점")
    print(f"V4 필수 점수: {v4_critical}점")
    print(f"V4 권장 점수: {v4_recommended}점")
    print(f"사용가능 점수: {available_score}/{total_score}점 ({available_score/total_score*100:.1f}%)")
    
    # 등급 판정
    score_ratio = available_score / total_score * 100
    if score_ratio >= 80:
        grade = "A"
    elif score_ratio >= 60:
        grade = "B"
    elif score_ratio >= 40:
        grade = "C"
    else:
        grade = "D"
    
    print(f"\n최종 등급: {grade}")
    
    return df_result

if __name__ == "__main__":
    # 실행
    result_df = generate_v4_validation_report()
    
    print("\n" + "="*80)
    print("💾 v4_validation_report.csv 파일이 생성되었습니다.")
    print("엑셀에서 열어서 확인하세요.")
    print("="*80)