import pandas as pd
import os
from datetime import datetime, timedelta

def split_csv_by_20minutes(input_file='full.csv', output_dir='split_data'):
    """
    CSV 파일을 20분 단위로 분할하는 함수
    
    Parameters:
    -----------
    input_file : str
        입력 CSV 파일 경로
    output_dir : str
        출력 디렉토리 경로
    """
    
    # 출력 디렉토리 생성
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        print(f"📁 출력 디렉토리 생성: {output_dir}")
    
    # CSV 파일 읽기
    print(f"📂 파일 읽기 중: {input_file}")
    df = pd.read_csv(input_file)
    
    # timestamp 컬럼을 datetime 형식으로 변환
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    
    # 데이터 정보 출력
    print(f"\n📊 데이터 정보:")
    print(f"  - 전체 행 수: {len(df):,}")
    print(f"  - 시작 시간: {df['timestamp'].min()}")
    print(f"  - 종료 시간: {df['timestamp'].max()}")
    print(f"  - 전체 기간: {df['timestamp'].max() - df['timestamp'].min()}")
    
    # timestamp 기준으로 정렬
    df = df.sort_values('timestamp')
    
    # 20분 단위로 그룹 생성
    # 시작 시간을 기준으로 20분 간격 설정
    start_time = df['timestamp'].min()
    
    # 시작 시간이 정확히 20분 단위가 아닐 경우 조정
    if start_time.minute % 20 != 0:
        # 다음 20분 단위로 올림
        minutes_to_add = 20 - (start_time.minute % 20)
        start_time = start_time + timedelta(minutes=minutes_to_add)
        start_time = start_time.replace(second=0, microsecond=0)
    
    print(f"\n⏰ 20분 단위 시작 시간: {start_time}")
    
    # 20분 단위 그룹 할당
    df['group'] = ((df['timestamp'] - start_time) // timedelta(minutes=20)).astype(int)
    
    # 음수 그룹(시작 시간 이전 데이터)은 0으로 설정
    df.loc[df['group'] < 0, 'group'] = -1
    
    # 그룹별로 파일 저장
    groups = df.groupby('group')
    
    print(f"\n📈 총 {len(groups)}개의 20분 단위 그룹 생성")
    print("\n🔄 파일 분할 진행 중...")
    
    saved_files = []
    
    for group_id, group_data in groups:
        if group_id == -1:
            # 시작 시간 이전 데이터
            filename = f"before_start_time.csv"
        else:
            # 해당 그룹의 시작 시간 계산
            group_start = start_time + timedelta(minutes=20 * group_id)
            group_end = group_start + timedelta(minutes=20)
            
            # 파일명 생성 (YYYYMMDD_HHMM_to_HHMM.csv)
            filename = f"{group_start.strftime('%Y%m%d_%H%M')}_to_{group_end.strftime('%H%M')}.csv"
        
        # group 컬럼 제거하고 저장
        output_path = os.path.join(output_dir, filename)
        group_data.drop(columns=['group']).to_csv(output_path, index=False)
        
        # 저장 정보 기록
        saved_files.append({
            'filename': filename,
            'rows': len(group_data),
            'start_time': group_data['timestamp'].min(),
            'end_time': group_data['timestamp'].max()
        })
        
        # 진행상황 출력 (10개마다)
        if len(saved_files) % 10 == 0:
            print(f"  ✅ {len(saved_files)}개 파일 저장 완료...")
    
    print(f"\n✨ 분할 완료! 총 {len(saved_files)}개 파일 생성")
    
    # 결과 요약 출력
    print("\n📋 분할 결과 요약:")
    print("-" * 80)
    print(f"{'파일명':45} {'행 수':>10} {'시작 시간':20} {'종료 시간':20}")
    print("-" * 80)
    
    # 처음 5개와 마지막 5개 파일 정보 출력
    display_files = saved_files[:5] + ['...'] + saved_files[-5:] if len(saved_files) > 10 else saved_files
    
    for file_info in display_files:
        if file_info == '...':
            print(f"{'...':45} {'...':>10} {'...':20} {'...':20}")
        else:
            print(f"{file_info['filename']:45} {file_info['rows']:>10,} "
                  f"{str(file_info['start_time']):20} {str(file_info['end_time']):20}")
    
    print("-" * 80)
    
    # 통계 정보
    total_rows = sum(f['rows'] for f in saved_files)
    avg_rows = total_rows / len(saved_files)
    
    print(f"\n📊 통계:")
    print(f"  - 총 파일 수: {len(saved_files)}개")
    print(f"  - 총 데이터 행 수: {total_rows:,}")
    print(f"  - 평균 행 수/파일: {avg_rows:,.1f}")
    print(f"  - 최대 행 수: {max(f['rows'] for f in saved_files):,}")
    print(f"  - 최소 행 수: {min(f['rows'] for f in saved_files):,}")
    
    return saved_files

def analyze_20min_data(input_file='full.csv'):
    """
    20분 단위 데이터 분석 (분할 전 미리보기)
    """
    print("📊 20분 단위 데이터 분석 중...")
    
    # CSV 파일 읽기
    df = pd.read_csv(input_file)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df = df.sort_values('timestamp')
    
    # 시작 시간 찾기
    start_time = df['timestamp'].min()
    print(f"\n🕐 데이터 시작 시간: {start_time}")
    
    # 20분 단위로 조정된 시작 시간
    if start_time.minute % 20 != 0:
        minutes_to_add = 20 - (start_time.minute % 20)
        adjusted_start = start_time + timedelta(minutes=minutes_to_add)
        adjusted_start = adjusted_start.replace(second=0, microsecond=0)
    else:
        adjusted_start = start_time.replace(second=0, microsecond=0)
    
    print(f"🕐 20분 단위 조정 시간: {adjusted_start}")
    
    # 처음 몇 개의 20분 구간 미리보기
    print("\n📅 처음 10개 구간 미리보기:")
    print("-" * 60)
    
    for i in range(10):
        interval_start = adjusted_start + timedelta(minutes=20 * i)
        interval_end = interval_start + timedelta(minutes=20)
        
        # 해당 구간의 데이터 수 계산
        mask = (df['timestamp'] >= interval_start) & (df['timestamp'] < interval_end)
        count = mask.sum()
        
        if count > 0:
            print(f"[{i+1:2d}] {interval_start.strftime('%Y-%m-%d %H:%M')} ~ "
                  f"{interval_end.strftime('%H:%M')} : {count:,}개 데이터")
    
    print("-" * 60)

# 실행 예제
if __name__ == "__main__":
    # 1. 먼저 데이터 분석
    print("="* 80)
    print("🔍 20분 단위 데이터 분석")
    print("="* 80)
    analyze_20min_data('full.csv')
    
    # 2. 사용자 확인
    print("\n" + "="* 80)
    user_input = input("\n📌 데이터를 20분 단위로 분할하시겠습니까? (y/n): ")
    
    if user_input.lower() == 'y':
        print("\n" + "="* 80)
        print("✂️ CSV 파일 20분 단위 분할 시작")
        print("="* 80)
        
        # 분할 실행
        split_csv_by_20minutes('full.csv', 'split_data_20min')
        
        print("\n✅ 작업 완료!")
        print(f"📁 분할된 파일들은 'split_data_20min' 폴더에 저장되었습니다.")
    else:
        print("\n❌ 분할 작업을 취소했습니다.")