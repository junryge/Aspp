# -*- coding: utf-8 -*-
"""
1ÎÖÑÏπò CSV Îç∞Ïù¥ÌÑ∞Î°ú 1550+ ‚Üí 10Î∂Ñ ÌõÑ 1700+ Ï¶ùÍ∞Ä Ìå®ÌÑ¥ Î∂ÑÏÑù
Î©îÎ™®Î¶¨ ÏµúÏ†ÅÌôî + ÏÉÅÏÑ∏ ÌÜµÍ≥Ñ + ÏãúÍ∞ÅÌôî
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import gc
import warnings

warnings.filterwarnings('ignore')
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['axes.unicode_minus'] = False

def load_large_csv(filepath):
    """ÎåÄÏö©Îüâ CSV Î°úÎìú (Î©îÎ™®Î¶¨ ÏµúÏ†ÅÌôî)"""
    print("\n" + "="*80)
    print("üìÇ Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...")
    print("="*80)
    
    # Î®ºÏ†Ä ÏÉòÌîåÎ°ú Ïª¨Îüº ÌôïÏù∏
    sample_df = pd.read_csv(filepath, nrows=5)
    print(f"Ïª¨Îüº: {list(sample_df.columns)}")
    
    # Ï≤≠ÌÅ¨ Îã®ÏúÑÎ°ú ÏùΩÍ∏∞
    chunk_size = 100000
    chunks = []
    
    for i, chunk in enumerate(pd.read_csv(filepath, chunksize=chunk_size)):
        chunks.append(chunk)
        if (i + 1) % 5 == 0:
            print(f"  {(i+1)*chunk_size:,}Í∞ú Î°úÎî©...")
    
    df = pd.concat(chunks, ignore_index=True)
    print(f"‚úÖ Î°úÎî© ÏôÑÎ£å: {len(df):,}Í∞ú Ìñâ")
    
    # CURRTIME Î≥ÄÌôò
    if 'CURRTIME' in df.columns:
        df['CURRTIME'] = pd.to_datetime(df['CURRTIME'], format='%Y%m%d%H%M', errors='coerce')
        print(f"Í∏∞Í∞Ñ: {df['CURRTIME'].min()} ~ {df['CURRTIME'].max()}")
    
    return df

def analyze_1550_to_1700_pattern(df):
    """1550+ ‚Üí 1700+ Ìå®ÌÑ¥ Î∂ÑÏÑù"""
    
    print("\n" + "="*80)
    print("üìä 1550+ ‚Üí 10Î∂Ñ ÌõÑ 1700+ Ï¶ùÍ∞Ä Ìå®ÌÑ¥ Î∂ÑÏÑù")
    print("="*80)
    print(f"Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞: {len(df):,}Í∞ú")
    
    # ===== 1. 1550 Ïù¥ÏÉÅ Íµ¨Í∞Ñ Ï∞æÍ∏∞ =====
    print("\n" + "="*80)
    print("1Ô∏è‚É£ TOTALCNT 1550+ Íµ¨Í∞Ñ Î∂ÑÏÑù")
    print("="*80)
    
    mask_1550 = df['TOTALCNT'] >= 1550
    count_1550 = mask_1550.sum()
    
    print(f"1550+ Íµ¨Í∞Ñ: {count_1550:,}Í∞ú ({count_1550/len(df)*100:.2f}%)")
    
    # Î∂ÑÌè¨ ÌôïÏù∏
    print(f"\nTOTALCNT Î∂ÑÌè¨:")
    print(f"  ÏµúÏÜåÍ∞í: {df['TOTALCNT'].min()}")
    print(f"  ÌèâÍ∑†Í∞í: {df['TOTALCNT'].mean():.2f}")
    print(f"  Ï§ëÏïôÍ∞í: {df['TOTALCNT'].median():.2f}")
    print(f"  ÏµúÎåÄÍ∞í: {df['TOTALCNT'].max()}")
    print(f"  1400+: {(df['TOTALCNT'] >= 1400).sum():,}Í∞ú")
    print(f"  1500+: {(df['TOTALCNT'] >= 1500).sum():,}Í∞ú")
    print(f"  1550+: {count_1550:,}Í∞ú")
    print(f"  1600+: {(df['TOTALCNT'] >= 1600).sum():,}Í∞ú")
    print(f"  1700+: {(df['TOTALCNT'] >= 1700).sum():,}Í∞ú")
    
    if count_1550 < 100:
        print(f"\n‚ö†Ô∏è 1550+ Îç∞Ïù¥ÌÑ∞Í∞Ä {count_1550}Í∞úÎ°ú Ï†ÅÏäµÎãàÎã§.")
        threshold = 1500
        print(f"üîÑ ÏûÑÍ≥ÑÍ∞íÏùÑ {threshold}ÏúºÎ°ú Ï°∞Ï†ïÌïòÏó¨ Î∂ÑÏÑùÌï©ÎãàÎã§.")
    else:
        threshold = 1550
    
    # ===== 2. 10Î∂Ñ ÌõÑ ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± =====
    print("\n" + "="*80)
    print("2Ô∏è‚É£ 10Î∂Ñ ÌõÑ 1700+ ÎèÑÎã¨ Ïó¨Î∂Ä Î∂ÑÏÑù")
    print("="*80)
    
    results = []
    
    # Ïù∏Îç±Ïä§ ÏÉùÏÑ±
    valid_indices = df[df['TOTALCNT'] >= threshold].index
    total_valid = len(valid_indices)
    
    print(f"Î∂ÑÏÑù ÎåÄÏÉÅ: {total_valid:,}Í∞ú")
    print("10Î∂Ñ ÌõÑ ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ï§ë...")
    
    for count, idx in enumerate(valid_indices):
        if idx + 10 >= len(df):
            continue
        
        # ÏßÑÌñâÏÉÅÌô© Ï∂úÎ†•
        if count % 10000 == 0 and count > 0:
            print(f"  {count:,}/{total_valid:,} ({count/total_valid*100:.1f}%)")
        
        current_totalcnt = df.loc[idx, 'TOTALCNT']
        future_totalcnt = df.loc[idx + 10, 'TOTALCNT']
        
        # Ï¶ùÍ∞Ä Ïó¨Î∂Ä
        increase_to_1700 = (future_totalcnt >= 1700)
        increase_amount = future_totalcnt - current_totalcnt
        
        # ÌòÑÏû¨ ÏãúÏ†ê Ïª¨ÎüºÍ∞í
        result = {
            'index': idx,
            'currtime': df.loc[idx, 'CURRTIME'] if 'CURRTIME' in df.columns else idx,
            'current_totalcnt': current_totalcnt,
            'future_totalcnt': future_totalcnt,
            'increase': increase_amount,
            'reach_1700': increase_to_1700,
            'M14AM10A': df.loc[idx, 'M14AM10A'],
            'M10AM14A': df.loc[idx, 'M10AM14A'],
            'M14AM10ASUM': df.loc[idx, 'M14AM10ASUM'],
            'M14AM14B': df.loc[idx, 'M14AM14B'],
            'M14BM14A': df.loc[idx, 'M14BM14A'],
            'M14AM14BSUM': df.loc[idx, 'M14AM14BSUM'],
            'M14AM16': df.loc[idx, 'M14AM16'],
            'M16M14A': df.loc[idx, 'M16M14A'],
            'M14AM16SUM': df.loc[idx, 'M14AM16SUM']
        }
        
        results.append(result)
    
    results_df = pd.DataFrame(results)
    
    # Î©îÎ™®Î¶¨ Ï†ïÎ¶¨
    del valid_indices
    gc.collect()
    
    # ÌÜµÍ≥Ñ
    total_cases = len(results_df)
    reach_1700_cases = results_df['reach_1700'].sum()
    
    print(f"\n‚úÖ Î∂ÑÏÑù ÏôÑÎ£å!")
    print(f"Î∂ÑÏÑù ÏºÄÏù¥Ïä§: {total_cases:,}Í∞ú")
    print(f"10Î∂Ñ ÌõÑ 1700+ ÎèÑÎã¨: {reach_1700_cases:,}Í∞ú ({reach_1700_cases/total_cases*100:.2f}%)")
    print(f"10Î∂Ñ ÌõÑ 1700 ÎØ∏Îã¨: {total_cases - reach_1700_cases:,}Í∞ú ({(total_cases-reach_1700_cases)/total_cases*100:.2f}%)")
    
    # ===== 3. Í∑∏Î£π ÎπÑÍµê =====
    print("\n" + "="*80)
    print("3Ô∏è‚É£ 1700+ ÎèÑÎã¨ vs ÎØ∏Îã¨ Í∑∏Î£π ÎπÑÍµê")
    print("="*80)
    
    group_reach = results_df[results_df['reach_1700'] == True]
    group_not_reach = results_df[results_df['reach_1700'] == False]
    
    print(f"\n„Äê1700+ ÎèÑÎã¨ Í∑∏Î£π„Äë {len(group_reach):,}Í∞ú")
    print(f"„Äê1700 ÎØ∏Îã¨ Í∑∏Î£π„Äë {len(group_not_reach):,}Í∞ú")
    
    # Ïª¨ÎüºÎ≥Ñ ÌèâÍ∑† ÎπÑÍµê
    comparison_cols = ['M14AM10A', 'M10AM14A', 'M14AM10ASUM', 
                       'M14AM14B', 'M14BM14A', 'M14AM14BSUM',
                       'M14AM16', 'M16M14A', 'M14AM16SUM']
    
    print("\n" + "-"*80)
    print(f"{'Ïª¨Îüº':<15} {'ÎèÑÎã¨ ÌèâÍ∑†':>12} {'ÎØ∏Îã¨ ÌèâÍ∑†':>12} {'Ï∞®Ïù¥':>12} {'Ï∞®Ïù¥Ïú®':>10}")
    print("-"*80)
    
    comparison_results = []
    
    for col in comparison_cols:
        if len(group_reach) > 0 and len(group_not_reach) > 0:
            reach_mean = group_reach[col].mean()
            not_reach_mean = group_not_reach[col].mean()
            diff = reach_mean - not_reach_mean
            diff_rate = (diff / not_reach_mean * 100) if not_reach_mean != 0 else 0
            
            print(f"{col:<15} {reach_mean:>12.2f} {not_reach_mean:>12.2f} {diff:>12.2f} {diff_rate:>9.2f}%")
            
            comparison_results.append({
                'column': col,
                'reach_mean': reach_mean,
                'reach_std': group_reach[col].std(),
                'reach_median': group_reach[col].median(),
                'not_reach_mean': not_reach_mean,
                'not_reach_std': group_not_reach[col].std(),
                'not_reach_median': group_not_reach[col].median(),
                'diff': diff,
                'diff_rate': diff_rate
            })
    
    comparison_df = pd.DataFrame(comparison_results)
    
    # ===== 4. Ï§ëÏöî Ìå®ÌÑ¥ Î∞úÍ≤¨ =====
    print("\n" + "="*80)
    print("4Ô∏è‚É£ üî• Ï¶ùÍ∞Ä ÏòàÏ∏° ÌïµÏã¨ Ìå®ÌÑ¥")
    print("="*80)
    
    # Ï∞®Ïù¥Ïú® Í∏∞Ï§Ä Ï†ïÎ†¨
    comparison_df_sorted = comparison_df.sort_values('diff_rate', ascending=False)
    
    print("\n„ÄêÍ∞ÄÏû• ÌÅ∞ Ï∞®Ïù¥Î•º Î≥¥Ïù¥Îäî Ïª¨Îüº TOP 5„Äë")
    for idx, row in comparison_df_sorted.head(5).iterrows():
        direction = "ÎÜíÏùå" if row['diff_rate'] > 0 else "ÎÇÆÏùå"
        print(f"  {idx+1}. {row['column']}: ÎèÑÎã¨Í∑∏Î£πÏù¥ {abs(row['diff_rate']):.1f}% Îçî {direction}")
        print(f"     ÎèÑÎã¨: {row['reach_mean']:.2f} (¬±{row['reach_std']:.2f}) vs ÎØ∏Îã¨: {row['not_reach_mean']:.2f} (¬±{row['not_reach_std']:.2f})")
    
    # ===== 5. ÏûÑÍ≥ÑÍ∞í Î∂ÑÏÑù =====
    print("\n" + "="*80)
    print("5Ô∏è‚É£ ÏûÑÍ≥ÑÍ∞í Í∏∞Î∞ò ÏòàÏ∏° Í∑úÏπô")
    print("="*80)
    
    if len(group_reach) > 0:
        print("\n„Äê1700+ ÎèÑÎã¨ Í∑∏Î£πÏùò Ïª¨Îüº Î∂ÑÌè¨„Äë")
        
        for col in comparison_cols:
            reach_values = group_reach[col]
            
            percentile_10 = reach_values.quantile(0.10)
            percentile_25 = reach_values.quantile(0.25)
            percentile_50 = reach_values.median()
            percentile_75 = reach_values.quantile(0.75)
            percentile_90 = reach_values.quantile(0.90)
            
            print(f"\n{col}:")
            print(f"  ÏµúÏÜå: {reach_values.min():.2f}")
            print(f"  10%: {percentile_10:.2f}")
            print(f"  25%: {percentile_25:.2f}")
            print(f"  Ï§ëÏïô: {percentile_50:.2f}")
            print(f"  75%: {percentile_75:.2f}")
            print(f"  90%: {percentile_90:.2f}")
            print(f"  ÏµúÎåÄ: {reach_values.max():.2f}")
    
    # ===== 6. ÏòàÏ∏° Í∑úÏπô ÏÉùÏÑ± =====
    print("\n" + "="*80)
    print("6Ô∏è‚É£ üí° ÏòàÏ∏° Í∑úÏπô Ï†úÏïà")
    print("="*80)
    
    if len(group_reach) > 0:
        # ÎèÑÎã¨ Í∑∏Î£πÏùò Ï§ëÏïôÍ∞íÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Í∑úÏπô ÏÉùÏÑ±
        rules = []
        
        for col in comparison_cols:
            reach_median = group_reach[col].median()
            not_reach_median = group_not_reach[col].median() if len(group_not_reach) > 0 else 0
            
            if reach_median > not_reach_median:
                rules.append({
                    'column': col,
                    'threshold': reach_median,
                    'direction': '>=',
                    'diff': reach_median - not_reach_median
                })
            elif reach_median < not_reach_median:
                rules.append({
                    'column': col,
                    'threshold': reach_median,
                    'direction': '<=',
                    'diff': not_reach_median - reach_median
                })
        
        # Ï∞®Ïù¥Í∞Ä ÌÅ∞ ÏàúÏÑúÎ°ú Ï†ïÎ†¨
        rules_sorted = sorted(rules, key=lambda x: abs(x['diff']), reverse=True)
        
        print(f"\n„ÄêÏ†úÏïà Í∑úÏπô„Äë ÌòÑÏû¨ {threshold}+ Ïùº Îïå, 10Î∂Ñ ÌõÑ 1700+ ÏòàÏ∏°:")
        print("\nIF (Îã§Ïùå Ï°∞Í±¥ Ï§ë 3Í∞ú Ïù¥ÏÉÅ ÎßåÏ°±):")
        
        for i, rule in enumerate(rules_sorted[:6], 1):
            print(f"  {i}. {rule['column']} {rule['direction']} {rule['threshold']:.2f}")
        
        print("\nTHEN: 10Î∂Ñ ÌõÑ 1700+ ÎèÑÎã¨ Í∞ÄÎä•ÏÑ± ÎÜíÏùå")
        
        # ===== 7. Í∑úÏπô Í≤ÄÏ¶ù =====
        print("\n" + "="*80)
        print("7Ô∏è‚É£ Í∑úÏπô Í≤ÄÏ¶ù")
        print("="*80)
        
        if len(rules_sorted) >= 3:
            # ÏÉÅÏúÑ 5Í∞ú Í∑úÏπô Ï†ÅÏö©
            top_rules = rules_sorted[:5]
            
            # Í∑úÏπô Ï†ÅÏö©
            conditions = []
            for rule in top_rules:
                col = rule['column']
                threshold_val = rule['threshold']
                direction = rule['direction']
                
                if direction == '>=':
                    condition = results_df[col] >= threshold_val
                else:
                    condition = results_df[col] <= threshold_val
                
                conditions.append(condition)
            
            # 3Í∞ú Ïù¥ÏÉÅ ÎßåÏ°±
            rule_match_3 = sum(conditions) >= 3
            
            # Í≤ÄÏ¶ù
            true_positive = (rule_match_3 & results_df['reach_1700']).sum()
            false_positive = (rule_match_3 & ~results_df['reach_1700']).sum()
            true_negative = (~rule_match_3 & ~results_df['reach_1700']).sum()
            false_negative = (~rule_match_3 & results_df['reach_1700']).sum()
            
            total = len(results_df)
            
            print(f"\n„Äê3Í∞ú Ïù¥ÏÉÅ Í∑úÏπô ÎßåÏ°± Ïãú„Äë")
            print(f"  True Positive (Í∑úÏπôO, Ïã§Ï†úO): {true_positive:,}Í∞ú")
            print(f"  False Positive (Í∑úÏπôO, Ïã§Ï†úX): {false_positive:,}Í∞ú")
            print(f"  True Negative (Í∑úÏπôX, Ïã§Ï†úX): {true_negative:,}Í∞ú")
            print(f"  False Negative (Í∑úÏπôX, Ïã§Ï†úO): {false_negative:,}Í∞ú")
            
            if true_positive + false_positive > 0:
                precision = true_positive / (true_positive + false_positive)
                print(f"\n  Ï†ïÌôïÎèÑ (Precision): {precision*100:.2f}%")
            
            if true_positive + false_negative > 0:
                recall = true_positive / (true_positive + false_negative)
                print(f"  Ïû¨ÌòÑÏú® (Recall): {recall*100:.2f}%")
            
            if total > 0:
                accuracy = (true_positive + true_negative) / total
                print(f"  Ï†ÑÏ≤¥ Ï†ïÌôïÎèÑ: {accuracy*100:.2f}%")
            
            if precision > 0 and recall > 0:
                f1 = 2 * (precision * recall) / (precision + recall)
                print(f"  F1 Score: {f1*100:.2f}%")
    
    # ===== 8. Ï¶ùÍ∞ÄÎüâ Î∂ÑÏÑù =====
    print("\n" + "="*80)
    print("8Ô∏è‚É£ Ï¶ùÍ∞ÄÎüâ ÏÉÅÏÑ∏ Î∂ÑÏÑù")
    print("="*80)
    
    print(f"\nÏ¶ùÍ∞ÄÎüâ ÌÜµÍ≥Ñ:")
    print(f"  ÌèâÍ∑† Ï¶ùÍ∞Ä: {results_df['increase'].mean():.2f}")
    print(f"  Ï§ëÏïô Ï¶ùÍ∞Ä: {results_df['increase'].median():.2f}")
    print(f"  ÏµúÎåÄ Ï¶ùÍ∞Ä: {results_df['increase'].max():.2f}")
    print(f"  ÏµúÏÜå Ï¶ùÍ∞Ä: {results_df['increase'].min():.2f}")
    
    print(f"\nÎèÑÎã¨ Í∑∏Î£π Ï¶ùÍ∞ÄÎüâ:")
    if len(group_reach) > 0:
        print(f"  ÌèâÍ∑†: {group_reach['increase'].mean():.2f}")
        print(f"  Ï§ëÏïô: {group_reach['increase'].median():.2f}")
        print(f"  ÏµúÎåÄ: {group_reach['increase'].max():.2f}")
    
    print(f"\nÎØ∏Îã¨ Í∑∏Î£π Ï¶ùÍ∞ÄÎüâ:")
    if len(group_not_reach) > 0:
        print(f"  ÌèâÍ∑†: {group_not_reach['increase'].mean():.2f}")
        print(f"  Ï§ëÏïô: {group_not_reach['increase'].median():.2f}")
        print(f"  ÏµúÏÜå: {group_not_reach['increase'].min():.2f}")
    
    # ===== 9. CSV Ï†ÄÏû• =====
    print("\n" + "="*80)
    print("9Ô∏è‚É£ Í≤∞Í≥º Ï†ÄÏû•")
    print("="*80)
    
    # Î∂ÑÏÑù Í≤∞Í≥º
    output_csv = 'pattern_analysis_results_1year.csv'
    results_df.to_csv(output_csv, index=False, encoding='utf-8-sig')
    print(f"‚úÖ Î∂ÑÏÑù Í≤∞Í≥º: {output_csv}")
    
    # ÎπÑÍµê ÌÜµÍ≥Ñ
    comparison_output = 'pattern_comparison_stats_1year.csv'
    comparison_df.to_csv(comparison_output, index=False, encoding='utf-8-sig')
    print(f"‚úÖ ÎπÑÍµê ÌÜµÍ≥Ñ: {comparison_output}")
    
    # ===== 10. ÏãúÍ∞ÅÌôî =====
    print("\n" + "="*80)
    print("üîü Í∑∏ÎûòÌîÑ ÏÉùÏÑ± Ï§ë...")
    print("="*80)
    
    create_analysis_graphs(results_df, comparison_df_sorted, group_reach, group_not_reach, threshold)
    
    return results_df, comparison_df

def create_analysis_graphs(results_df, comparison_df, group_reach, group_not_reach, threshold):
    """Î∂ÑÏÑù Í∑∏ÎûòÌîÑ ÏÉùÏÑ±"""
    
    fig = plt.figure(figsize=(20, 14))
    
    # 1. Ïª¨ÎüºÎ≥Ñ ÌèâÍ∑† ÎπÑÍµê
    ax1 = plt.subplot(3, 3, 1)
    x = range(len(comparison_df))
    reach_means = comparison_df['reach_mean']
    not_reach_means = comparison_df['not_reach_mean']
    
    width = 0.35
    ax1.bar([i - width/2 for i in x], reach_means, width, label='1700+ Reach', alpha=0.7, color='#2E86AB')
    ax1.bar([i + width/2 for i in x], not_reach_means, width, label='1700 Not Reach', alpha=0.7, color='#F18F01')
    
    ax1.set_xlabel('Columns', fontsize=11, fontweight='bold')
    ax1.set_ylabel('Average Value', fontsize=11, fontweight='bold')
    ax1.set_title('1) Column Averages Comparison', fontsize=12, fontweight='bold')
    ax1.set_xticks(x)
    ax1.set_xticklabels(comparison_df['column'], rotation=45, ha='right', fontsize=9)
    ax1.legend()
    ax1.grid(True, alpha=0.3, axis='y')
    
    # 2. Ï∞®Ïù¥Ïú® Í∞ÄÎ°ú ÎßâÎåÄ
    ax2 = plt.subplot(3, 3, 2)
    colors = ['#2E86AB' if v > 0 else '#F18F01' for v in comparison_df['diff_rate']]
    ax2.barh(range(len(comparison_df)), comparison_df['diff_rate'], 
            color=colors, alpha=0.7, edgecolor='black')
    ax2.set_yticks(range(len(comparison_df)))
    ax2.set_yticklabels(comparison_df['column'], fontsize=9)
    ax2.set_xlabel('Difference Rate (%)', fontsize=11, fontweight='bold')
    ax2.set_title('2) Difference Rate by Column', fontsize=12, fontweight='bold')
    ax2.axvline(x=0, color='red', linestyle='--', linewidth=2)
    ax2.grid(True, alpha=0.3, axis='x')
    
    # 3. Ï¶ùÍ∞ÄÎüâ Î∂ÑÌè¨
    ax3 = plt.subplot(3, 3, 3)
    ax3.hist(results_df['increase'], bins=50, alpha=0.7, color='#A23B72', edgecolor='black')
    ax3.axvline(x=results_df['increase'].mean(), color='red', linestyle='--', linewidth=2, 
              label=f'Mean: {results_df["increase"].mean():.1f}')
    ax3.axvline(x=0, color='black', linestyle='-', linewidth=1)
    ax3.set_xlabel('Increase Amount (10min)', fontsize=11, fontweight='bold')
    ax3.set_ylabel('Frequency', fontsize=11, fontweight='bold')
    ax3.set_title('3) TOTALCNT Increase Distribution', fontsize=12, fontweight='bold')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # 4. ÌòÑÏû¨Í∞í vs 10Î∂Ñ ÌõÑ
    ax4 = plt.subplot(3, 3, 4)
    if len(group_reach) > 0:
        ax4.scatter(group_reach['current_totalcnt'], group_reach['future_totalcnt'], 
                  alpha=0.5, s=20, color='#2E86AB', label='1700+ Reach')
    if len(group_not_reach) > 0:
        ax4.scatter(group_not_reach['current_totalcnt'], group_not_reach['future_totalcnt'], 
                  alpha=0.5, s=20, color='#F18F01', label='1700 Not Reach')
    
    ax4.axhline(y=1700, color='red', linestyle='--', linewidth=2, label='1700 Threshold')
    ax4.plot([threshold, 2000], [threshold, 2000], 'k--', alpha=0.3, label='No Change')
    
    ax4.set_xlabel('Current TOTALCNT', fontsize=11, fontweight='bold')
    ax4.set_ylabel('Future TOTALCNT (10min)', fontsize=11, fontweight='bold')
    ax4.set_title('4) Current vs Future TOTALCNT', fontsize=12, fontweight='bold')
    ax4.legend(fontsize=8)
    ax4.grid(True, alpha=0.3)
    
    # 5-9. Ï£ºÏöî Ïª¨Îüº ÏÇ∞Ï†êÎèÑ
    key_columns = comparison_df.head(5)['column'].tolist()
    
    for idx, col in enumerate(key_columns):
        row = (idx + 4) // 3
        col_idx = (idx + 4) % 3
        ax = plt.subplot(3, 3, idx + 5)
        
        if len(group_reach) > 0:
            ax.scatter(group_reach[col], group_reach['future_totalcnt'], 
                      alpha=0.5, s=15, color='#2E86AB', label='1700+ Reach')
        
        if len(group_not_reach) > 0:
            ax.scatter(group_not_reach[col], group_not_reach['future_totalcnt'], 
                      alpha=0.5, s=15, color='#F18F01', label='1700 Not Reach')
        
        ax.axhline(y=1700, color='red', linestyle='--', linewidth=2, alpha=0.7)
        
        ax.set_xlabel(col, fontsize=10, fontweight='bold')
        ax.set_ylabel('Future TOTALCNT', fontsize=10, fontweight='bold')
        ax.set_title(f'{idx+5}) {col} vs Future', fontsize=11, fontweight='bold')
        ax.legend(fontsize=7)
        ax.grid(True, alpha=0.3)
    
    plt.suptitle(f'Pattern Analysis: {threshold}+ ‚Üí 10min later 1700+ (1 Year Data)', 
                 fontsize=16, fontweight='bold')
    
    plt.tight_layout()
    
    output_file = 'pattern_analysis_1550_to_1700_1year.png'
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"\n‚úÖ Í∑∏ÎûòÌîÑ Ï†ÄÏû•: {output_file}")
    
    plt.close()

if __name__ == '__main__':
    print("\n" + "="*80)
    print("üöÄ 1ÎÖÑÏπò Îç∞Ïù¥ÌÑ∞Î°ú 1550+ ‚Üí 1700+ Ìå®ÌÑ¥ Î∂ÑÏÑù")
    print("="*80)
    
    # CSV ÌååÏùº Í≤ΩÎ°ú (ÏàòÏ†ï ÌïÑÏöî)
    csv_file = 'uu.csv'  # ÎòêÎäî 'uu2.csv'
    
    # ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏
    import os
    if not os.path.exists(csv_file):
        print(f"\n‚ùå ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§: {csv_file}")
        print("\nÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌååÏùº:")
        for f in ['uu.csv', 'uu2.csv', 'A.TXT']:
            if os.path.exists(f):
                print(f"  ‚úÖ {f}")
        print("\nÏΩîÎìú ÏÉÅÎã®Ïùò csv_file Î≥ÄÏàòÎ•º ÏàòÏ†ïÌïòÏÑ∏Ïöî.")
        exit(1)
    
    # Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    df = load_large_csv(csv_file)
    
    # Ìå®ÌÑ¥ Î∂ÑÏÑù
    results_df, comparison_df = analyze_1550_to_1700_pattern(df)
    
    print("\n" + "="*80)
    print("‚úÖ Ï†ÑÏ≤¥ Î∂ÑÏÑù ÏôÑÎ£å!")
    print("="*80)
    print("\nÏÉùÏÑ±Îêú ÌååÏùº:")
    print("  1. pattern_analysis_results_1year.csv - Ï†ÑÏ≤¥ Î∂ÑÏÑù Í≤∞Í≥º")
    print("  2. pattern_comparison_stats_1year.csv - Ïª¨ÎüºÎ≥Ñ ÎπÑÍµê ÌÜµÍ≥Ñ")
    print("  3. pattern_analysis_1550_to_1700_1year.png - 9Í∞ú Í∑∏ÎûòÌîÑ")
    print("\n" + "="*80)